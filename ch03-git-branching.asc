[#ch03-git-branching]
[[r_git_branching]]
== Ramificaciones en Git

(((branches)))
Cualquier sistema de control de versiones moderno tiene algún mecanismo para soportar el uso de ramas.
Cuando hablamos de ramificaciones, significa que tú has tomado la rama principal de desarrollo (master) y a partir de ahí has continuado trabajando sin seguir la rama principal de desarrollo.
En muchos sistemas de control de versiones este proceso es costoso, pues a menudo requiere crear una nueva copia del código, lo cual puede tomar mucho tiempo cuando se trata de proyectos grandes.

Algunas personas resaltan que uno de los puntos más fuertes de Git es su sistema de ramificaciones y lo cierto es que esto le hace resaltar sobre los otros sistemas de control de versiones.
¿Por qué esto es tan importante?
La forma en la que Git maneja las ramificaciones es increíblemente rápida, haciendo así de las operaciones de ramificación algo casi instantáneo, al igual que el avance o el retroceso entre distintas ramas, lo cual también es tremendamente rápido.
A diferencia de otros sistemas de control de versiones, Git promueve un ciclo de desarrollo donde las ramas se crean y se unen ramas entre sí, incluso varias veces en el mismo día.
Entender y manejar esta opción te proporciona una poderosa y exclusiva herramienta que puede, literalmente, cambiar la forma en la que desarrollas.

include::book/03-git-branching/sections/nutshell.asc[]

include::book/03-git-branching/sections/basic-branching-and-merging.asc[]

include::book/03-git-branching/sections/branch-management.asc[]

include::book/03-git-branching/sections/workflows.asc[]

include::book/03-git-branching/sections/remote-branches.asc[]

include::book/03-git-branching/sections/rebasing.asc[]

=== Recapitulación

Hemos visto los procedimientos básicos de ramificación (branching) y fusión (merging) en Git.
A estas alturas, te sentirás cómodo creando nuevas ramas (branch), saltando (checkout) entre ramas para trabajar y fusionando (merge) ramas entre ellas.
También conocerás cómo compartir tus ramas enviándolas (push) a un servidor compartido, cómo trabajar colaborativamente en ramas compartidas, y cómo reorganizar (rebase) tus ramas antes de compartirlas.
A continuación, hablaremos sobre lo que necesitas para tener tu propio servidor de hospedaje Git.
