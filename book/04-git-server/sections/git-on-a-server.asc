[[_git_on_the_server]]
=== Conseguir Git en un servidor 

Ahora vamos a cubrir la creación de un servicio de Git ejecutando estos protocolos en su propio servidor.
[NOTE]
====
Aquí estaremos demostrando los comandos y los pasos necesarios para hacer las instalaciones básicas, simplificado en un servidor basado en Linux, aunque también es posible ejecutar estos servicios en los servidores Mac o Windows.
En realidad la creación de un servidor de producción dentro de su infraestructura sin duda supondrá diferencias en las medidas de seguridad o de las herramientas del sistema operativo, pero espero que esto le de la idea general de lo que está involucrado.
====

Con el fin de establecer inicialmente cualquier servidor Git, hay que exportar un repositorio existente en un nuevo repositorio desnudo - un repositorio que no contiene un directorio de trabajo.
Esto es generalmente fácil de hacer.
Para clonar el repositorio para crear un nuevo repositorio desnudo, se ejecuta el comando clon con la opción `--bare`. (((git commands, clone, bare)))
Por convención, los directorios del repositorio desnudas terminan en .git , así:

[source,console]
----
$ git clone --bare my_project my_project.git
Clonación en desnudo repositorio my_project.git '... 
hecho.
----

Ahora debería tener una copia de los datos del directorio Git en tu directorio `my_project.git`.
Esto es más o menos equivalente a algo así:

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

Hay un par de pequeñas diferencias en el archivo de configuración; pero para su propósito, esto es cerca de la misma cosa.
Toma el repositorio Git por sí mismo, sin un directorio de trabajo y crea un directorio específicamente para él solo.

[[_bare_repo]]
==== Poner al Desnudo Repositorio en un Servidor

Ahora que usted tiene una copia desnuda de su repositorio, todo lo que necesita hacer es ponerlo en un servidor y establser sus protocolos.
Digamos que usted ha configurado un servidor llamado `git.example.com` que tiene acceso a SSH, y quiere almacenar todos sus repositorios Git bajo el directorio / opt` / git`.
Suponiendo que existe `/ opt / git` en ese servidor, puede configurar su nuevo repositorio copiando su repositorio desnudo sobre:

[source,console]
----
$ scp -r my_project.git user@git.example.com:/opt/git
----

En este punto, otros usuarios que tienen acceso al mismo servidor SSH  que ha leído, acceso al directorio `/ opt / git` pueden clonar el repositorio mediante la ejecución

[source,console]
----
$ git clone user@git.example.com:/opt/git/my_project.git
----

Si un usuario en un servidor SSHs y tiene acceso de escritura al directorio `git my_project.git` / opt / /, que también tendrán acceso automáticamente push.

Git automáticamente agrega permisos de grupo para la escritura en un repositorio si se ejecuta el comando `git init` con la opción` --shared`.(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /opt/git/my_project.git
$ git init --bare --shared
----

Usted ve lo fácil que es tomar un repositorio Git, crear una versión desnuda, y colocarlo en un servidor al que usted y sus colaboradores tiene acceso SSH.
Ahora está listo para colaborar en el mismo proyecto.

Es importante tener en cuenta que esto es literalmente todo lo que necesita hacer para ejecutar un servidor Git útil para que varias personas tienen acceso - sólo tiene que añadir cuentas SSH poder en un servidor, y se adhieren un repositorio desnudo en alguna parte que todos los usuarios han leído y escribir el acceso a los.
Usted está listo - no necesita nada más.

En las próximas secciones, verás cómo ampliar a configuraciones más sofisticadas.
Esta sección incluirá no tener que crear cuentas de usuario para cada usuario, añadiendo acceso de lectura pública a los repositorios, la creación de interfaces de usuario web y más.
Sin embargo, tenga en cuenta que para colaborar con un par de personas en un proyecto privado, todo_lo_que_necesitas_es un servidor SSH y un repositorio desnudo.

==== Pequeñas configuraciones

Si usted es un pequeño equipo o se acaba de probar Git en su organización y tienen sólo unos pocos desarrolladores, las cosas pueden ser simples para ti.
Uno de los aspectos más complicados de configurar un servidor Git es la gestión de usuarios.
Si quieres algunos repositorios sean de sólo lectura a ciertos usuarios y leer / escribir para los demás, el acceso y los permisos pueden ser un poco más difícil de organizar.

===== Acceso SSH

(((serving repositories, SSH)))
Si usted tiene un servidor al que todos los desarrolladores ya tienen acceso SSH, es generalmente más fácil de configurar el primer repositorio allí, porque hay que hacer casi ningún trabajo (como ya vimos en la sección anterior). Si quieres permisos tipo de control de acceso más complejas en sus repositorios, puede manejarlos con los permisos del sistema de archivos normales del sistema operativo de su servidor se ejecuta.

Si desea colocar los repositorios en un servidor que no tiene cuentas para todo el mundo en su equipo que desea tener acceso de escritura, debe configurar el acceso SSH para ellos. Suponemos que si usted tiene un servidor con el que hacer esto, ya tiene un servidor SSH instalado, y así es como usted está accediendo al servidor.

Hay algunas maneras que usted puede dar acceso a todos en su equipo. La primera es la creación de cuentas para todo el mundo, que es sencillo, pero puede ser engorroso. Es posible que no desee ejecutar `adduser`  y establecer contraseñas temporales para cada usuario.

Un segundo método consiste en crear un solo usuario 'git' en la máquina, pida a cada usuario que es tener acceso de escritura que le envíe una clave pública SSH, y añade que la clave para el archivo `~ / .ssh / authorized_keys` de su nuevo usuario 'git'.
En ese momento, todo el mundo podrá acceder a esa máquina mediante el usuario 'git'.
Esto no afecta a los datos cometer en cualquier forma - el usuario SSH se conecta como no afecta a las confirmaciones que ha grabado.

Otra manera de hacerlo es tener su autenticación del servidor SSH desde un servidor LDAP o alguna otra fuente de autenticación centralizado que es posible que ya haya configurado. Mientras que cada usuario puede tener acceso shell en la máquina, cualquier mecanismo de autenticación SSH que se te ocurra debería funcionar.
