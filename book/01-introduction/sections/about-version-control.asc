=== Acerca del Control de Versiones

(((version control)))
¿Qué es control de versiones, y por qué debería importarte?  Control de versiones es un sistema que registra los cambios realizados en un archivo o conjunto de archivos a lo largo del tiempo, de modo que puedas recuperar versiones específicas más adelante.  Aunque en los ejemplos de este libro usarás archivos de código fuente como aquellos cuya versión está siendo controlada, en realidad puedes hacer lo mismo con casi cualquier tipo de archivo que encuentres en una computadora.

Si eres diseñador gráfico o de web y quieres mantener cada versión de una imagen o diseño (algo que sin duda vas a querer), usar un sistema de control de versiones (VCS por sus siglas en inglés) es una muy desición muy acertada.  Dicho sistema te permite regresar a versiones anteriores de tus archivos, regresar a una versión anterior del proyecto completo, comparar cambios a lo largo del tiempo, ver quién modificó por última vez algo que pueda estar causando problemas, ver quién introdujo un problema y cuándo, y mucho más.  Usar un VCS también significa generalmente que si arruinar o pierdes archivos, será posible recuperarlos fácilmente.  Adicionalmente, obtendrás todos estos beneficios a un costo muy bajo.

==== Sistemas de Control de Versiones Locales

(((version control,local)))
Un método de control de versiones usado por muchas personas es copiar los archivos a otro directorio (quizás indicando la fecha y hora en que lo hicieron, si son ingeniosos).  Este método es muy común porque es muy sencillo, pero también es tremendamente propenso a errores.  Es fácil olvidar en qué directorio te encuentras, y guardar accidentalmente en el archivo equivocado o sobrescribir archivos que no querías.

Para afrontar este problema los programadores desarrollaron hace tiempo VCS locales que contenían una simple base de datos en la que se llevaba el registro de todos los cambios realizados a los archivos.

.Local version control.
image::images/local.png[Local version control diagram]

Una de las herramientas de control de versiones más popular fue un sistema llamado RCS, que todavía podemos encontrar en muchas de las computadoras actuales.  Incluso el famoso sistema operativo Mac OS X incluye el comando `rcs` cuando instalas las herramientas de desarrollo.  Esta herramienta funciona guardando conjuntos de parches (es decir, las diferencias entre archivos) en un formato especial en disco, y es capaz de recrear cómo era un archivo en cualquier momento a partir de dichos parches.

One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.
Even the popular Mac OS X operating system includes the `rcs` command when you install the Developer Tools.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== Sistemas de Control de Versiones Centralizados

(((version control,centralized)))
El siguiente gran problema con el que se encuentran las personas es que necesitan colaborar con desarrolladores en otros sistemas.  Los sistemas de Control de Versiones Centralizados (CVCS por sus siglas en inglés) fueron desarrollados para solucionar este problema.  Estos sistemas, como CVS, Subversion, y Perforce, tienen un único servidor que contiene todos los archivos versionados, y varios clientes que descargan los archivos desde ese lugar central.  (((CVS)))(((Subversion)))(((Perforce)))
Este ha sido el estándar para el control de versiones por muchos años.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

Esta configuración ofrece muchas ventajas, especialmente frente a VCS locales.  Por ejemplo, todas las personas saben hasta cierto punto en qué están trabajando los otros colaboradores del proyecto.  Los administradores tienen control detallado sobre qué puede hacer cada usuario, y es mucho más fácil administrar un CVCS que tener que lidiar con bases de datos locales en cada cliente.

Sin embargo, esta configuración también tiene serias desventajas.  La más obvia es el punto único de fallo que representa el servidor centralizado.  Si ese servidor se cae durante una hora, entonces durante esa hora nadie podrá colaborar o guardar cambios en archivos en los que hayan estato trabajando.  Si el disco duro en el que se encuentra la base de datos central se corrompe, y no se han realizado copias de seguridad adecuadamente, se perferá toda la información del proyecto, con excepción de las copias instantáneas que las personas tengan en sus máquinas locales.  Los VCS locales sufren de este mismo problema:  Cuando tienes toda la historia del proyecto en un mismo lugar, te arriesgas a perderlo todo.

==== Sistemas de Contro de Versiones Distribuidos

(((version control,distributed)))
Los sistemas de Control de Versiones Distribuidos (DVCS por sus siglas en inglés) ofrecen soluciones para los problemas que han sido mencionados.  En un DVCS (como Git, Mercurial, Bazaar o Darcs), los clientes no solo descargan la última copia instantánea de los archivos, sino que se replica completamente el repositorio.  De esta maneta, si un servidor deja de funcionar y estos sistemas estaban colaborando a través d él, cualquiera de los repositorios disponibles en los clientes puede ser copiado al servidor con el fin de restaurarlo.  Cada clon es realmente una copia completa de todos los datos.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Además, muchos de estos sistemas se encargan de manejar numerosos repositorios remotos con los cuales pueden trabajar, de tal forma que puedes colaborar simultáneamente con diferentes grupos de personas en distintas maneras dentro del mismo proyecto.  Esto permite establecer varios flujos de trabajo que no son posibles en sistemas centralizados, como pueden ser los modelos jerárquicos.
