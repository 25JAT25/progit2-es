=== Acerca del Control de Versiones

(((version control)))
Â¿QuÃ© es control de versiones, y por quÃ© deberÃ­a importarte?  Control de versiones es un sistema que registra los cambios realizados en un archivo o conjunto de archivos a lo largo del tiempo, de modo que puedas recuperar versiones especÃ­ficas mÃ¡s adelante.  Aunque en los ejemplos de este libro usarÃ¡s archivos de cÃ³digo fuente como aquellos cuya versiÃ³n estÃ¡ siendo controlada, en realidad puedes hacer lo mismo con casi cualquier tipo de archivo que encuentres en una computadora.

Si eres diseÃ±ador grÃ¡fico o de web y quieres mantener cada versiÃ³n de una imagen o diseÃ±o (algo que sin duda vas a querer), usar un sistema de control de versiones (VCS por sus siglas en inglÃ©s) es una muy decisiÃ³n muy acertada.  Dicho sistema te permite regresar a versiones anteriores de tus archivos, regresar a una versiÃ³n anterior del proyecto completo, comparar cambios a lo largo del tiempo, ver quiÃ©n modificÃ³ por Ãºltima vez algo que pueda estar causando problemas, ver quiÃ©n introdujo un problema y cuÃ¡ndo, y mucho mÃ¡s.  Usar un VCS tambiÃ©n significa generalmente que si arruinas o pierdes archivos, serÃ¡ posible recuperarlos fÃ¡cilmente.  Adicionalmente, obtendrÃ¡s todos estos beneficios a un costo muy bajo.

==== Sistemas de Control de Versiones Locales

(((version control,local)))
Un mÃ©todo de control de versiones usado por muchas personas es copiar los archivos a otro directorio (quizÃ¡s indicando la fecha y hora en que lo hicieron, si son ingeniosos).  Este mÃ©todo es muy comÃºn porque es muy sencillo, pero tambiÃ©n es tremendamente propenso a errores.  Es fÃ¡cil olvidar en quÃ© directorio te encuentras, y guardar accidentalmente en el archivo equivocado o sobrescribir archivos que no querÃ­as.

Para afrontar este problema los programadores desarrollaron hace tiempo VCS locales que contenÃ­an una simple base de datos en la que se llevaba el registro de todos los cambios realizados a los archivos.

.Local version control.
image::images/local.png[Local version control diagram]

Una de las herramientas de control de versiones mÃ¡s popular fue un sistema llamado RCS, que todavÃ­a podemos encontrar en muchas de las computadoras actuales.  Incluso el famoso sistema operativo Mac OS X incluye el comando `rcs` cuando instalas las herramientas de desarrollo.  Esta herramienta funciona guardando conjuntos de parches (es decir, las diferencias entre archivos) en un formato especial en disco, y es capaz de recrear cÃ³mo era un archivo en cualquier momento a partir de dichos parches.

==== Sistemas de Control de Versiones Centralizados

(((version control,centralized)))
El siguiente gran problema con el que se encuentran las personas es que necesitan colaborar con desarrolladores en otros sistemas.  Los sistemas de Control de Versiones Centralizados (CVCS por sus siglas en inglÃ©s) fueron desarrollados para solucionar este problema.  Estos sistemas, como CVS, Subversion, y Perforce, tienen un Ãºnico servidor que contiene todos los archivos versionados, y varios clientes que descargan los archivos desde ese lugar central.  (((CVS)))(((Subversion)))(((Perforce)))
Este ha sido el estÃ¡ndar para el control de versiones por muchos aÃ±os.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

Esta configuraciÃ³n ofrece muchas ventajas, especialmente frente a VCS locales.  Por ejemplo, todas las personas saben hasta cierto punto en quÃ© estÃ¡n trabajando los otros colaboradores del proyecto.  Los administradores tienen control detallado sobre quÃ© puede hacer cada usuario, y es mucho mÃ¡s fÃ¡cil administrar un CVCS que tener que lidiar con bases de datos locales en cada cliente.

Sin embargo, esta configuraciÃ³n tambiÃ©n tiene serias desventajas.  La mÃ¡s obvia es el punto Ãºnico de fallo que representa el servidor centralizado.  Si ese servidor se cae durante una hora, entonces durante esa hora nadie podrÃ¡ colaborar o guardar cambios en archivos en los que hayan estado trabajando.  Si el disco duro en el que se encuentra la base de datos central se corrompe, y no se han realizado copias de seguridad adecuadamente, se perderÃ¡ toda la informaciÃ³n del proyecto, con excepciÃ³n de las copias instantÃ¡neas que las personas tengan en sus mÃ¡quinas locales.  Los VCS locales sufren de este mismo problema:  Cuando tienes toda la historia del proyecto en un mismo lugar, te arriesgas a perderlo todo.

==== Sistemas de Control de Versiones Distribuidos

(((version control,distributed)))
Los sistemas de Control de Versiones Distribuidos (DVCS por sus siglas en inglÃ©s) ofrecen soluciones para los problemas que han sido mencionados.  En un DVCS (como Git, Mercurial, Bazaar o Darcs), los clientes no solo descargan la Ãºltima copia instantÃ¡nea de los archivos, sino que se replica completamente el repositorio.  De esta manera, si un servidor deja de funcionar y estos sistemas estaban colaborando a travÃ©s de Ã©l, cualquiera de los repositorios disponibles en los clientes puede ser copiado al servidor con el fin de restaurarlo.  Cada clon es realmente una copia completa de todos los datos.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

AdemÃ¡s, muchos de estos sistemas se encargan de manejar numerosos repositorios remotos con los cuales pueden trabajar, de tal forma que puedes colaborar simultÃ¡neamente con diferentes grupos de personas en distintas maneras dentro del mismo proyecto.  Esto permite establecer varios flujos de trabajo que no son posibles en sistemas centralizados, como pueden ser los modelos jerÃ¡rquicos.
