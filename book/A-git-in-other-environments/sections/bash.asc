=== Git con Bash

(((bash)))(((tab completion, bash)))(((shell prompts, bash)))
Si eres usuario de Bash, puedes acceder a una serie de características de la consola o terminal que pueden hacer mucho más llevadera la experiencia con Git.  Aunque Git viene con extensiones para varios tipos de terminales, éstas no suelen estar activadas por defecto.

Lo primero es obtener una copia del archivo `contrib/completion/git-completion.bash` del código fuente de Git.
Haz una copia de este archivo en cualquier lugar, por ejemplo el directorio de inicio, y añádelo al `.bashrc`:
////
If you're a Bash user, you can tap into some of your shell's features to make your experience with Git a lot friendlier.
Git actually ships with plugins for several shells, but it's not turned on by default.

First, you need to get a copy of the `contrib/completion/git-completion.bash` file out of the Git source code.
Copy it somewhere handy, like your home directory, and add this to your `.bashrc`:
////
[source,console]
-----
. ~/git-completion.bash
-----

Una vez hecho esto, cámbiate a un directorio que sea un repositorio git y teclea:
////
Once that's done, change your directory to a git repository, and type:
////

[source,console]
----
$ git chec<tab>
----

… Bash debería autocompletar con `git checkout`.
Esto funciona con todos los subcomandos de Git, parámetros en línea de comandos y en nombres remotos y referencias,  cuando sea apropiado.

También resulta útil personalizar el prompt para que muestre información sobre el repositorio Git que hay en el directorio actual.
Se puede hacer tan simple o tan complejo como quieras aunque hay una serie de elementos de información que a la mayoría de las personas les resultan útiles, como la rama actual o el estado del directorio de trabajo.
Para añadirlo al prompt, simplemente haz una copia del archivo `contrib/completion/git-prompt.sh` del código fuente de Git al directorio de inicio y añade lo siguiente al `.bashrc`:

////
…and Bash will auto-complete to `git checkout`.
This works with all of Git's subcommands, command-line parameters, and remotes and ref names where appropriate.

It's also useful to customize your prompt to show information about the current directory's Git repository.
This can be as simple or complex as you want, but there are generally a few key pieces of information that most people want, like the current branch, and the status of the working directory.
To add these to your prompt, just copy the `contrib/completion/git-prompt.sh` file from Git's source repository to your home directory, add something like this to your `.bashrc`:
////

[source,console]
-----
. ~/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
export PS1='\w$(__git_ps1 " (%s)")\$ '
-----

La `\w` indica que muestre el directorio de trabajo actual, la `\$` que muestre el símbolo `$` como parte del prompt y el `__git_ps1 " (%s)"` llama una función en `git-prompt.sh` con un parámetro de formato.
Así, el prompt del bash tendrá este aspecto cuando estemos en un proyecto gestionado con Git:
////
The `\w` means print the current working directory, the `\$` prints the `$` part of the prompt, and `__git_ps1 " (%s)"` calls the function provided by `git-prompt.sh` with a formatting argument.
Now your bash prompt will look like this when you're anywhere inside a Git-controlled project:
////

.Prompt personalizado en `bash`.
image::images/git-bash.png[Prompt personalizado en `bash`.]

Ambos scripts tienen una práctica documentación, por lo que, para más información, revisa los contenidos de `git-completion.bash` y `git-prompt.sh`.
////
Both of these scripts come with helpful documentation; take a look at the contents of `git-completion.bash` and `git-prompt.sh` for more information.
////
