=== Interfaces gráficas

(((GUIs)))(((Graphical tools)))
////
Git's native environment is in the terminal.
New features show up there first, and only at the command line is the full power of Git completely at your disposal.
But plain text isn't the best choice for all tasks; sometimes a visual representation is what you need, and some users are much more comfortable with a point-and-click interface.
////
El entorno nativo de Git es la línea de comandos.
Sólo desde la línea de comandos se encuentra disponible todo el poder de Git. 
El texto plano no siempre es la mejor opción para todas las tareas y en ocasiones se necesita una representación visual además, algunos usuarios se siente más cómodo con una interfaz de apuntar y pulsar.
////
It's important to note that different interfaces are tailored for different workflows.
Some clients expose only a carefully curated subset of Git functionality, in order to support a specific way of working that the author considers effective.
When viewed in this light, none of these tools can be called ``better'' than any of the others, they're simply more fit for their intended purpose.
Also note that there's nothing these graphical clients can do that the command-line client can't; the command-line is still where you'll have the most power and control when working with your repositories.
////
Conviene advertir que los diferentes interfaces están adaptados para diferentes flujos de trabajo.
Algunos clientes sólo disponen de un subconjunto adecuadamente seleccionado de toda la funiconalidad de Git para poder atender una forma contreta de trabajar que los autores consideran eficiente.
Bajo esta perspectiva, ninguna de estas herramientas puede considerase ``mejor'' que otras, simplmente se ajusta mejor a un objetivo prefijado.
Además, no hay nada en estos clientes gráficos que no se encuentre ya en el cliente en línea de comandos y, por tanto, la línea de comandos es el modo con el que se consigue la máxima potencia y control cuando se trabaja con repositorios.

==== `gitk` y `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Cuando se instala Git, también se instalan sus herramientas gráficas: `gitk` y `git-gui`.
////
When you install Git, you also get its visual tools, `gitk` and `git-gui`.
////

`gitk` es un visor gráfico del histórico. 
Hay que considerarlo como una interfaz gráfica mejorada sobre `git log` y `git grep`.
Es la herramienta que hay que utilizar cuando se quiere encontrar algo que sucedió en el pasado o visualizar el histórico de un proyecto.
////
`gitk` is a graphical history viewer.
Think of it like a powerful GUI shell over `git log` and `git grep`.
This is the tool to use when you're trying to find something that happened in the past, or visualize your project's history.
////

Gitk es muy fácil de invocar desde la línea de comandos.
Simplemente, hay que moverse con `cd` hasta un repositorio de Git y teclear: 
////
Gitk is easiest to invoke from the command-line.
Just `cd` into a Git repository, and type:
////
[source,console]
----
$ gitk [git log options]
----

Gitk admite muchas opciones desde la línea de comandos, la mayoria de las cuales se pasan desde la acción `git log` subyacente.
Probablemente una de las más útiles sea la opción `--all` que indica a gitk que muestre todos los commit accesibles desde _cualquier_ referencia, no sólo desde el HEAD.
La interfaz de gitk tiene este aspecto:
////
Gitk accepts many command-line options, most of which are passed through to the underlying `git log` action.
Probably one of the most useful is the `--all` flag, which tells gitk to show commits reachable from _any_ ref, not just HEAD.
Gitk's interface looks like this:
////

.El visor de históricos `gitk`.
image::images/gitk.png[El visor de históricos `gitk`.]

En la parte superior hay algo que se parece un poco a la salida de `git log --graph`, donde cada punto representa un commit, las líneas representan relaciones entre padres e hijos y las referencias aparecen como cajas coloreadas.
El punto amarillo representa una CABEZA o HEAD y el punto rojo a cambios que han sido aceptado con commit.
En la parte inferior se encuentra un commit seleccionado con los comentarios y el parche a la izquierda, junto con una vista resumen a la derecha.
En medio hay una serie de controles que se usan para buscar en el histórico.
////
On the top is something that looks a bit like the output of `git log --graph`; each dot represents a commit, the lines represent parent relationships, and refs are shown as colored boxes.
The yellow dot represents HEAD, and the red dot represents changes that are yet to become a commit.
At the bottom is a view of the selected commit; the comments and patch on the left, and a summary view on the right.
In between is a collection of controls used for searching history.
////

Por su parte, `git-gui` es principalmente una herramienta para elaborar commits.
Resulta igual de sencilla de invocar desde la línea de comandos:
////
`git-gui`, on the other hand, is primarily a tool for crafting commits.
It, too, is easiest to invoke from the command line:
////

[source,console]
-----
$ git gui
-----

La herramienta tiene este aspecto:
////
And it looks something like this:
////

.La herramienta `git-gui`.
image::images/git-gui.png[La herramienta `git-gui`.]

A la izquierda está el índice con los cambios no preparados al principio y los preparados al final.
Es posible mover ficheros completos entre los dos estados haciendo clic en sus respectivos iconos o seleccionar un archivo para visualizarlo haciendo clic en su nombre.
////
On the left is the index; unstaged changes are on top, staged changes on the bottom.
You can move entire files between the two states by clicking on their icons, or you can select a file for viewing by clicking on its name.
////

A la derecha, en la parte superior, se encuentra la vista de diferencias que muestra los cambios producidos en el archivo seleccionado.
Se pueden preparar bloques o líneas individualmente haciendo clic con el botón derecho sobre esta zona.
////
At top right is the diff view, which shows the changes for the currently-selected file.
You can stage individual hunks (or individual lines) by right-clicking in this area.
////

En la parte inferior se encuentra el área de mensajes y acciones. Escribiendo un mensaje en la caja de texto y haciendo clic en el botón ``Commit`` se hace algo lo mismo que con `git commit`.
Es posible rectificar el último commit eligiendo ``Amend`` en el botón de opción, con lo que se actualizará la zona de cambios preparados o ``Staged Changes`` con el contenido del último commit.
Así es posible poner un cambio como preprepado o no preparado, modificar el mensaje de un commit y, a continuación, hacer clic en ''Commit'' para sustituir un commit anterior por uno nuevo.
////
At the bottom right is the message and action area. Type your message into the text box and click ``Commit'' to do something similar to `git commit`.
You can also choose to amend the last commit by choosing the ``Amend'' radio button, which will update the ``Staged Changes'' area with the contents of the last commit.
Then you can simply stage or unstage some changes, alter the commit message, and click ``Commit'' again to replace the old commit with a new one.
////

`gitk` y `git-gui` son ejmeplos de herramientas orientadas a tareas.
Cada una de ellas está adaptada para un propósito específico (visualización del histórico y creación de commits, respectivamente), omitiendo aquellas características que no son necesarias para su tarea.
////
`gitk` and `git-gui` are examples of task-oriented tools.
Each of them is tailored for a specific purpose (viewing history and creating commits, respectively), and omit the features not necessary for that task.
////

==== GitHub para Mac y Windows

(((GitHub for Mac)))(((GitHub for Windows)))
GitHub ha creado dos clientes Git: uno para Windows y otro para Mac.
Estos clientes son un claro ejemplo de herramientas orientadas a flujo de trabajo, en vez de proporcionar _toda_ la funcionalidad de Git, se centran en conjunto conservador de las funcionalidades más utilizadas que colaboran eficazmente.
Tienen este aspecto:
////
GitHub has created two workflow-oriented Git clients: one for Windows, and one for Mac.
These clients are a good example of workflow-oriented tools – rather than expose _all_ of Git's functionality, they instead focus on a curated set of commonly-used features that work well together.
They look like this:
////

.GitHub para Mac.
image::images/github_mac.png[GitHub para Mac.]

.GitHub para Windows.
image::images/github_win.png[GitHub para Windows.]

Se diseñaron para parecer y funcionar de una forma muy similar, por tanto, en este capítulo las trataremos como un mismo producto.
Aquí no encontrarás un informe detallado de estas herramientas (para eso tienen su propia documentación), aunque sí hay un
recorrido por la vista de ``cambios'' (que es donde pasaremos la mayor parte del tiempo).
////
They are designed to look and work very much alike, so we'll treat them like a single product in this chapter.
We won't be doing a detailed rundown of these tools (they have their own documentation), but a quick tour of the ``changes'' view (which is where you'll spend most of your time) is in order.
////

* A la izquierda se encuentra la lista de repositorios que el cliente tiene en seguimiento. Se pueden añadir un repositorio (bien por clonación o agregándlo localmente) pulsado en el icono ``+'' que está en la parte superor de este área.
* En el centro está el área de entrada de commit, en la que puedes introducir el mensaje del commit y seleccionar los archivos que se tienen que incluir. (En Windows, se visualiza el histórico de commit directamente debajo mientras que en Mac, lo hace en una pestaña separada.)
* En la parte derecha está el visor de diferencias que muestra los cambios producidos en el directorio de trabajo o los cambios que se incluyeron en el commit seleccionado.
* Lo último que advertir es el botón ``Sync'' en la parte superior derecha que es el principal método de interactuar con la red.
////
* On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the ``+'' icon at the top of this area.
* In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
  (On Windows, the commit history is displayed directly below this; on Mac, it's on a separate tab.)
* On the right is a diff view, which shows what's changed in your working directory, or which changes were included in the selected commit.
* The last thing to notice is the ``Sync'' button at the top-right, which is the primary way you interact over the network.
////

[NOTE]
====
Para usar estas herramientas no es necesario tener una cuenta en GitHub. Aunque se diseñaron como punto fuerte del servicio GitHub y del flujo de trabajo recomendado, realmente funcionan con cualquier repositorio y pueden realizar las operaciones de red con cualquier servidor Git.
////
You don't need a GitHub account to use these tools.
While they're designed to highlight GitHub's service and recommended workflow, they will happily work with any repository, and do network operations with any Git host.
////
====

===== Instalación

GitHub para Windows se puede descargar de https://windows.github.com[] y GitHub para Mac de https://mac.github.com[].
Cuando la aplicación se ejecuta por primera vez, realiza un recorrido por toda la configuración inicial, es decir, se configura el nombre y la dirección de correo electrónico, así como realiza las configuraciones normales para muchas opciones de configuración habituales como la caché de credenciales o el comportamiento del salto de línea (CRLF).
////
can be downloaded from https://windows.github.com[], and GitHub for Mac from https://mac.github.com[].
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.
////

Ambos están ``siempre actualizados'' - las actualizaciones se descargan e instalan en segundo plano mientras la aplicación está abierta.
Incluyen un práctica versión completa de Git que significa que muy probablemente no tengas que preocuparte más de actualizarlo manualmente nunca más.
El cliente de Windows incluye un acceso directo para lanzar un Powershell con Posh-git, que veremos más adelante en este capítulo.
////
Both are ``evergreen'' – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch Powershell with Posh-git, which we'll talk more about later in this chapter.
////

El siguiente paso consiste en indicarle a la herramienta algún repositoria para que comience comience a trabajar.
El cliente te muestra una lista con los repositorios a los que tienes acceso en GitHub para que puedas clonarlos en un solo paso.
Si también dispones de repositorios locales, simplemente arrastra los directorios desde Finder o desde el Explorador de Windows hasta la ventana del cliente Github y se incluirán en la lista de repositorios a la derecha. 
////
The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left.
////
===== Flujo de trabajo recomendado 

Una vez instalado y configurado el cliente GitHub está listo para utilizarse en muchas tareas Git habituales.
El flujo de trabajo previsto para esta herramienta se denomina ``Flujo GitHub.''
Veremos con más detalle esto en <<_github_flow>>, pero, en esencia, consistirá en (a) realizar commits sobre una rama y (b) sincronizarse con un repositorio remoto con cierta regularidad.
////
Once it's installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the ``GitHub Flow.''
We cover this in more detail in <<_github_flow>>, but the general gist is that (a) you'll be committing to a branch, and (b) you'll be syncing up with a remote repository fairly regularly.
////

La gestión de ramas es uno de los puntos en donde las dos herramientas varían.
En MAc, hay un botón en la parte superior de la ventana para crear una rama nueva:
////
Branch management is one of the areas where the two tools diverge.
On Mac, there's a button at the top of the window for creating a new branch:
////

.Botón ``Create Branch'' en Mac.
image::images/branch_widget_mac.png[Botón ``Create Branch'' en Mac.]

En Windows, esto se realiza escribiendo el nombre de la nueva rama en la componente de gestión de ramas:
//// 
On Windows, this is done by typing the new branch's name in the branch-switching widget:
////

.Creación de una rama en Windows.
image::images/branch_widget_win.png[Creación de una rama en Windows.]

Una vez creada la rama, realizar nuevos commits sobre ella es bastante sencillo.
Realizas algunos cambios en el directorio de trabajo y, si vuelves a la ventana del cliente GitHub, te muestra los archivos que han sido modificados.
Introduce un mensaje para el commit, seleccionas los archivos que quieres incluir y pulsas sobre el botón ``Commit'' (ctrl-enter o ⌘-enter).
////
Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you'd like to include, and click the ``Commit'' button (ctrl-enter or ⌘-enter).
////

The main way you interact with other repositories over the network is through the ``Sync'' feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here's what happens when you click the Sync button:

. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.

This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time.

===== Summary

These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.


==== Other GUIs

There are a number of other graphical Git clients, and they run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at http://git-scm.com/downloads/guis[].
A more comprehensive list is available on the Git wiki site, at https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
