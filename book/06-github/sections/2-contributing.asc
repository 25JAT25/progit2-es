=== Participando en Proyectos

Una vez que tienes la cuenta configurada, veremos algunos detalles útiles
para ayudarte a participar en proyectos existentes.

==== Bifurcación (fork) de proyectos

(((forking)))
Si quieres participar en un proyecto existente, en el que no tengas permisos
de escritura, puedes bifurcarlo (hacer un ``fork''). Esto consiste en
crear una copia completa del repositorio totalmente bajo tu control:
se encontrará en tu cuenta y podrás escribir en él sin limitaciones.

[NOTE]
====
Históricamente, el término ``fork'' podía tener connotaciones algo negativas, ya
que significaba que alguien realizaba una copia del código fuente del proyecto
y las comenzaba a modificar de forma independiente al proyecto original,
tal vez para crear un proyecto competidor y dividir a su comunidad de
colaboradores. En GitHub, el ``fork'' es simplemente una copia del repositorio
donde puedas escribir, haciendo públicos tus propios cambios, como una manera
abierta de participación.
====

De esta forma, los proyectos no necesitan añadir colaboradores con acceso de
escritura (push). La gente puede bifurcar un proyecto, enviar sus propios
cambios a su copia y luego remitir esos cambios al repositorio original para
su aprobación, creando lo que se llama un Pull Request, que veremos más
adelante.
Esto permite abrir una discusión para la revisión del código, donde propietario
y participante pueden comunicarse acerca de los cambios y, en última instancia,
el propietario original puede aceptarlos e integrarlos en el proyecto original
cuando lo considere adecuado.

Para bifurcar un proyecto, visita la página del mismo y pulsa sobre el botón
``Fork'' del lado superior derecho de la página.

.Botón ``Fork''.
image::images/forkbutton.png[Botón ``Fork''.]

En unos segundos te redireccionarán a una página nueva de proyecto, en tu
cuenta y con tu propia copia del código fuente.


[[_github_flow]]
==== El Flujo de Trabajo en GitHub

(((GitHub, Flow)))
GitHub está diseñado alrededor de un flujo de trabajo de colaboración
específico, centrado en los Pull Requests.
Este flujo es válido tanto si colaboras con un pequeño equipo en un
repositorio compartido como si lo haces en una gran red de participantes con
docenas de bifurcaciones particulares.
Se centra en el workflow <<_topic_branch>> cubierto en <<_git_branching>>.

El funcionamiento habitual es el siguiente:

1. Se crea una rama a partir de `master`.
2. Se realizan algunos commits hacia esa rama.
3. Se envía esa rama hacia tu copia (fork) del proyecto.
4. Abres un Pull Request en GitHub.
5. Se participa en la discusión asociada y, opcionalmente, se realizan nuevos
commits.
6. El propietario del proyecto original cierra el Pull Request, bien fusionando
la rama con tus cambios o bien rechazándolos.

Este es, básicamente, el flujo de trabajo del Responsable de Integración visto
en <<_integration_manager>>, pero en lugar de usar el correo para comunicarnos
y revisar los cambios, lo que se hace es usar las herramientas web de GitHub.

Veamos un ejemplo de cómo proponer un cambio en un proyecto de código abierto
hospedado en GitHub, utilizando esta forma de trabajar.

===== Creación del Pull Request

Tony está buscando código para ejecutar en su microcontrolador Arduino, y
ha encontrado un programa interesante en GitHub, en la dirección
https://github.com/schacon/blink[].

.El proyecto en el que queremos participar.
image::images/blink-01-start.png[El proyecto en el que queremos participar.]

El único problema es que la velocidad de parpadeo es muy rápida, y piensa que
es mucho mejor esperar 3 segundos en lugar de 1 entre cada cambio de estado.
Luego, nuestra mejora consistirá en cambiar la velocidad y enviar el cambio
al proyecto como un cambio propuesto.

Lo primero que se hace, es pulsar en el botón 'Fork' ya conocido para hacer
nuestra propia copia del proyecto. Nuestro nombre de usuario es ``tonychacon''
por lo que la copia del proyecto tendrá como dirección
`https://github.com/tonychacon/blink`, y en esta copia es donde podemos
trabajar. La clonaremos localmente, crearemos una rama, realizaremos el cambio
sobre el código fuente y finalmente enviaremos esos cambios a GitHub.

[source,console]
----
$ git clone https://github.com/tonychacon/blink <1>
Cloning into 'blink'...

$ cd blink
$ git checkout -b slow-blink <2>
Switched to a new branch 'slow-blink'

$ sed -i '' 's/1000/3000/' blink.ino <3>

$ git diff --word-diff <4>
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
}

$ git commit -a -m 'three seconds is better' <5>
[slow-blink 5ca509d] three seconds is better
 1 file changed, 2 insertions(+), 2 deletions(-)

$ git push origin slow-blink <6>
Username for 'https://github.com': tonychacon
Password for 'https://tonychacon@github.com':
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/tonychacon/blink
 * [new branch]      slow-blink -> slow-blink
----

<1> Clonar nuestro fork en nuestro equipo
<2> Crear la rama, que sea descriptiva
<3> Realizar nuestros cambios
<4> Comprobar los cambios
<5> Realizar un commit de los cambios en la rama
<6> Enviar nuestra nueva rama de vuelta a nuestro fork

Ahora, si miramos nuestra bifurcación en GitHub, veremos que aparece un
aviso de creación de la rama y nos dará la oportunidad de realizar un
Pull Request al proyecto original.

También puedes ir a la página ``Branches'' en
`https://github.com/<user>/<project>/branches` para localizar la rama
y abrir un Pull Request desde ahí.

.Botón Pull Request
image::images/blink-02-pr.png[Botón Pull Request]

(((GitHub, pull requests)))
Si pulsamos en el botón verde, veremos una pantalla que permite crear un
título y una descripción para darle al propietario original una buena razón
para tenerla en cuenta. Normalmente debemos realizar cierto esfuerzo en
hacer una buena descripción para que el autor sepa realmente qué estamos
aportando y lo valore adecuadamente.

También veremos la lista de commits de la rama que están ``por delante'' de la
rama `master` (en este caso, la única) y un diff unificado de los cambios que
se aplicarían si se fusionasen con el proyecto original.

.Página de creación del Pull Request
image::images/blink-03-pull-request-open.png[Página de creación del Pull Request]

Cuando seleccionas el botón 'Create pull request', el propietario del proyecto
que has bifurcado recibirá una notificación de que alguien sugiere un cambio
junto a un enlace donde está toda la información.

[NOTE]
====
Aunque los Pull Request se utilizan en proyectos públicos como este donde el
ayudante tiene un conjunto de cambios completos para enviar, también se utiliza
en proyectos internos al principio del ciclo de desarrollo: puedes crear el
Pull Request con una rama propia y seguir enviando commits a dicha rama después
de crear el Pull Request, siguiendo un modelo iterativo de desarrollo, en lugar
de crear la rama cuando ya has finalizado todo el trabajo.
====

===== Evolución del Pull Request

En este punto, el propietario puede revisar el cambio sugerido e incorporarlo
(merge) al proyecto, o bien rechazarlo o comentarlo. Por ejemplo, si le gusta
la idea pero prefiere esperar un poco.

La discusión, en los workflow de <<_distributed_git>>, tiene lugar por
correo electrónico, mientras que en GitHub tiene lugar en línea. El propietario
del proyecto puede revisar el diff y dejar un comentario pulsando en
cualquier línea del diff.

.Comentando una línea concreta del diff
image::images/blink-04-pr-comment.png[Comentario de línea del PR]

Cuando el responsable hace el comentario, la persona que abrió el Pull
Request (y otras personas que hayan configurado sus cuentas para escuchar los
cambios del repositorio) recibirán una notificación. Más tarde veremos cómo
personalizar esto, pero si las notificaciones están activas, Tony recibiría
un correo como este:

[[_email_notification]]
.Comentarios enviados en notificaciones de correo
image::images/blink-04-email.png[Correo de notificación]

Cualquiera puede añadir sus propios comentarios. En <<_pr_discussion>>
vemos un ejemplo de propietario de proyecto comentando tanto una línea del
código como dejando un comentario general en la sección de discusión. Puedes
comprobar que los comentarios del código se insertan igualmente en la
conversación.

[[_pr_discussion]]
.Página de discusión del Pull Request
image::images/blink-05-general-comment.png[Página de discusión del PR]

El participante puede ver ahora qué tiene que hacer para ver aceptado su
cambio. Con suerte sera poco trabajo. Mientras que con el correo electrónico
tendrías que revisar los cambios y reenviarlos a la lista de correo, en
GitHub puedes, simplemente, enviar un nuevo commit a la rama y subirla (push).

Si el participante hace esto, el coordinador del proyecto será notificado
nuevamente y, cuando visiten la página, verán lo que ha cambiado. De hecho,
al ver que un cambio en una línea de código tenía ya un comentario, GitHub
se da cuenta y oculta el diff obsoleto.

[[_pr_final]]
.Pull Request final
image::images/blink-06-final.png[PR final]

Es interesante notar que si pulsas en ``Files Changed'' dentro del Pull
Reuqest, verás el ``diff unificado'', es decir, los cambios que se
introducirían en la rama principal si la otra rama fuera fusionada. En
términos de git, lo que hace es mostrarte la salida del comando
`git diff master ... <rama>`. Mira en <<_what_is_introduced>> para saber
más sobre este tipo de diff.

Otra cosa interesante es que GitHub también comprueba si el Pull Request
se fusionaría limpiamente (de forma automática) dando entonces un botón
para hacerlo. Este botón solo lo veremos si además somos los propietarios del
repositorio. Si pulsas este botón, GitHub fusionará sin avance rápido, es
decir, que incluso si la fusión pudiera ser de tipo avance-rápido,
de todas formas crearía un commit de fusión.

Si quieres, puedes obtener la rama en tu equipo y hacer la fusión localmente.
Si fusionas esta rama en la rama `master` y la subes a GitHub, el Pull
Request se cerrará de forma automática.

Este es el flujo de trabajo básico que casi todos los proyectos de GitHub
utilizan. Se crean las ramas de trabajo, se crean con ellas los Pull Requests,
se genera una discusión, se añade probablemente más trabajo a la rama y
finalmente la petición es cerrada (rechazada) o fusionada.

[NOTE]
.No solo forks
====
Observa que también puedes abrir un Pull Request entre dos ramas del mismo
repositorio. Si estás trabajando en una característica con alguien y ambos
tenéis acceso de escritura al repositorio, puedes subir una rama al mismo
y abrir un Pull Request con ella de fusión con `master` para poder formalizar
el proceso de revisión de código y discusión. Para esto no se requieren
bifurcaciones (forks).
====

==== Pull Requests Avanzados

Ahora que sabemos cómo participar de forma básica en un proyecto de GitHub,
veamos algunos trucos más acerca de los Pull Requests que ayudarán a usarlos
de forma más eficaz.

===== Pull Requests como parches

Hay que entender que muchos proyectos no tienen la idea de que los Pull
Requests sean colas de parches perfectos que se pueden aplicar limpiamiente
en orden, como sucede con los proyectos basados en listas de correo. Casi todos
los proyectos de GitHub consideran las ramas de Pull Requests como
conversaciones evolutivas acerca de un cambio propuesto, culminando en un
diff unificado que se aplica fusionando.

Esto es importante, ya que normalmente el cambio se sugiere bastante antes
de que el código sea suficientemente bueno, lo que lo aleja bastante del modelo
basado en parches por lista de correo. Esto facilita una discusión más
temprana con los colaboradores, lo que hace que la llegada de la solución
correcta sea un esfuerzo de comunidad. Cuando el cambio llega con un
Pull Request y los colaboradores o la comunidad sugieren un cambio, normalmente
los parches no son directamente alterados, sino que se realiza un nuevo
commit en la rama para enviar la diferencia que materializa esas sugerencias,
haciendo avanzar la conversación con el contexto del trabajo previo intacto.

Por ejemplo, si miras de nuevo en <<_pr_final>>, verás que el colaborador
no reorganiza su commit y envía un nuevo Pull Request. En lugar, lo que hace es
añadir nuevos commits y los envía a la misma rama. De este modo, si vuelves
a mirar el Pull Request en el futuro, puedes encontrar fácilmente todo el
contexto con todas las decisiones tomadas. Al pulsar el botón ``Merge'',
se crea un commit de fusión que referencia al Pull Request, con lo que es
fácil localizar para revisar la conversación original, si es necesario.

===== Manteniéndonos actualizados

Si el Pull Request se queda anticuado o por cualquier otra razón no puede
fusionarse limpiamente, lo normal es corregirlo para que el responsable pueda
fusionarlo fácilmente. GitHub comprobará esto y te dirá si cada Pull Request
tiene una fusión trivial posible o no.

[[_pr_fail]]
.Pull Request que no puede fusionarse limpiamente
image::images/pr-01-fail.png[fallo en fusión de PR]

Si ves algo parecido a <<_pr_fail>>, seguramente prefieras corregir la rama
de forma que se vuelva verde de nuevo y el responsable no tenga trabajo extra
con ella.

Tienes dos opciones para hacer esto. Puedes, por un lado, reorganizar (rebase)
la rama con el contenido de la rama `master` (normalmente esta es la rama desde
donde se hizo la bifurcación), o bien puedes fusionar la rama objetivo en
la tuya.

Muchos desarrolladores eligen la segunda opción, por las mismas razones que
que dijimos en la sección anterior. Lo que importa aquí es la historia y la
fusión final, por lo que reorganizar no es mucho más que tener una
historia más limpia y, sin embargo, es de lejos más complicado de hacer y
con más posibilidad de error.

Si quieres fusionar en la rama objetivo para hacer que tu Pull Request sea
fusionable, deberías añadir el repositorio original como un nuevo remoto,
bajártelo (fetch), fusionar la rama principal en la tuya, corregir los problemas
que surjan y finalmente enviarla (push) a la misma rama donde abriste
el Pull Request.

Por ejemplo, supongamos que en el ejemplo ``tonychacon'' que hemos venido
usando, el autor original hace un cambio que crea un conflicto con el Pull
Request. Seguiremos entonces los siguientes pasos.

[source,console]
----
$ git remote add upstream https://github.com/schacon/blink <1>

$ git fetch upstream <2>
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
From https://github.com/schacon/blink
 * [new branch]      master     -> upstream/master

$ git merge upstream/master <3>
Auto-merging blink.ino
CONFLICT (content): Merge conflict in blink.ino
Automatic merge failed; fix conflicts and then commit the result.

$ vim blink.ino <4>
$ git add blink.ino
$ git commit
[slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \
    into slower-blink

$ git push origin slow-blink <5>
Counting objects: 6, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/tonychacon/blink
   ef4725c..3c8d735  slower-blink -> slow-blink
----

<1> Añadir el repositorio original como un remoto llamado ``upstream''
<2> Obtener del remoto lo último enviado al repositorio
<3> Fusionar la rama principal en la nuestra
<4> Corregir el conflicto surgido
<5> Enviar de nuevo los cambios a la rama del Pull Request

Cuando haces esto, el Pull Request se actualiza automáticamente y se
re-chequea para ver si es posible un fusionado automático o no.

[[_pr_merge_fix]]
.Ahora el Pull Request ya fusiona bien
image::images/pr-02-merge-fix.png[PR corregido]

Una de las cosas interesantes de Git es que puedes hacer esto continuamente.
Si tienes un proyecto con mucha historia, puedes fácilmente fusionarte la
rama objetivo (`master`) una y otra vez cada vez que sea necesario, evitando
conflictos y haciendo que el proceso de integración de tus cambios sea muy
manejable.

Si finalmente prefieres reorganizar la rama para limpiarla, también puedes
hacerlo, pero se recomienda no forzar el push sobre la rama del Pull Request.
Si otras personas se la han bajado y hacen más trabajo en ella, provocarás
los problemas vistos en <<_rebase_peril>>. En su lugar, envía la rama
reorganizada a una nueva rama de GitHub y abre con ella un nuevo Pull Request,
con referencia al antiguo, cerrando además éste.

===== Referencias

La siguiente pregunta puede ser ``¿cómo hago una referencia a un Pull Request
antiguo?''. La respuesta es, de varias formas.

Comencemos con cómo referenciar otro Pull Request o una incidencia (Issue).
Todas las incidencias y Pull Requests tienen un número único que los
identifica. Este número no se repite dentro de un mismo proyecto. Por ejemplo,
dentro de un proyecto solo podemos tener un Pull Request con el número 3, y
una incidencia con el número 3. Si quieres hacer referencia al mismo, basta
con poner el símbolo `#` delante del número, en cualquier comentario o
descripción del Pull Request o incidencia. También se puede poner referencia
tipo `usuario#numero` para referirnos a un Pull Request o incidencia en
una bifurcación que haya creado ese usuario, o incluso puede usarse la forma
`usuario/repo#num` para referirse a una incidencia o Pull Request en otro
repositorio diferente.

Veamos un ejemplo. Supongamos que hemos reorganizado la rama del ejemplo
anterior, creado un nuevo pull request para ella y ahora queremos hacer una
referencia al viejo Pull Request desde el nuevo. También queremos hacer
referencia a una incidencia en la bifurcación del repositorio, y una
incidencia de un proyecto totalmente distinto. Podemos rellenar la descripción
justo como vemos en <<_pr_references>>.

[[_pr_references]]
.Referencias cruzadas en un Pull Request.
image::images/mentions-01-syntax.png[Referencias a PR]

Cuando enviamos este pull request, veremos todo como en
<<_pr_references_render>>.

[[_pr_references_render]]
.Cómo se ven las referencias cruzadas en el Pull Request.
image::images/mentions-02-render.png[Referencias a PR]

Observa que la URL completa de GitHub que hemos puesto ahí ha sido acortada
a la información que necesitamos realmente.

Ahora, si Tony regresa y cierra el Pull Request original, veremos que
GitHub crea un evento en la línea de tiempo del Pull Request. Esto significa
que cualquier que visite este Pull Request y vea que está cerrado, puede
fácilmente enlazarlo al que lo hizo obsoleto. El enlace se mostrará tal
como en <<_pr_closed>>.

[[_pr_closed]]
.Cómo se ven las referencias cruzadas en el Pull Request.
image::images/mentions-03-closed.png[PR cerrado]

Además de los números de incidencia, también puedes hacer referencia a un
commit específico usando la firma SHA-1. Puedes utilizar la cadena SHA-1
completa (de 40 caracteres) y al detectarla GitHub en un comentario, la
convertirá automáticamente en un enlace directo al commit. Nuevamente,
puedes hacer referencia a commits en bifurcaciones o en otros
repositorios del mismo modo que hicimos con las incidencias.

==== Markdown

Linking to other Issues is just the beginning of interesting things you can do with almost any text box on GitHub. In  Issue and Pull Request descriptions, comments, code comments and more, you can use what is called ``GitHub Flavored Markdown''. Markdown is like writing in plain text but which is rendered richly.

See <<_example_markdown>> for an example of how comments or text can be written and then rendered using Markdown.

[[_example_markdown]]
.An example of Markdown as written and as rendered.
image::images/markdown-01-example.png[Example Markdown]

===== GitHub Flavored Markdown

The GitHub flavor of Markdown adds more things you can do beyond the basic Markdown syntax. These can all be really useful when creating useful Pull Request or Issue comments or descriptions.

====== Task Lists

The first really useful GitHub specific Markdown feature, especially for use in Pull Requests, is the Task List. A task list is a list of checkboxes of things you want to get done. Putting them into an Issue or Pull Request normally indicates things that you want to get done before you consider the item complete.

You can create a task list like this:

[source]
----
- [X] Write the code
- [ ] Write all the tests
- [ ] Document the code
----

If we include this in the description of our Pull Request or Issue, we'll see it rendered like <<_task_lists>>

[[_task_lists]]
.Task lists rendered in a Markdown comment.
image::images/markdown-02-tasks.png[Example Task List]

This is often used in Pull Requests to indicate what all you would like to get done on the branch before the Pull Request will be ready to merge. The really cool part is that you can simply click the checkboxes to update the comment -- you don't have to edit the Markdown directly to check tasks off.

What's more, GitHub will look for task lists in your Issues and Pull Requests and show them as metadata on the pages that list them out. For example, if you have a Pull Request with tasks and you look at the overview page of all Pull Requests, you can see how far done it is. This helps people break down Pull Requests into subtasks and helps other people track the progress of the branch. You can see an example of this in <<_task_list_progress>>.

[[_task_list_progress]]
.Task list summary in the Pull Request list.
image::images/markdown-03-task-summary.png[Example Task List]

These are incredibly useful when you open a Pull Request early and use it to track your progress through the implementation of the feature.

====== Code Snippets

You can also add code snippets to comments. This is especially useful if you want to present something that you _could_ try to do before actually implementing it as a commit on your branch. This is also often used to add example code of what is not working or what this Pull Request could implement.

To add a snippet of code you have to ``fence'' it in backticks.

[source]
----
```java
for(int i=0 ; i < 5 ; i++)
{
   System.out.println("i is : " + i);
}
```
----

If you add a language name like we did there with 'java', GitHub will also try to syntax highlight the snippet. In the case of the above example, it would end up rendering like <<_md_code>>.

[[_md_code]]
.Rendered fenced code example.
image::images/markdown-04-fenced-code.png[Rendered fenced code]

====== Quoting

If you're responding to a small part of a long comment, you can selectively quote out of the other comment by preceding the lines with the `>` character. In fact, this is so common and so useful that there is a keyboard shortcut for it. If you highlight text in a comment that you want to directly reply to and hit the `r` key, it will quote that text in the comment box for you.

The quotes look something like this:

[source]
----
> Whether 'tis Nobler in the mind to suffer
> The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows?
----

Once rendered, the comment will look like <<_md_quote>>.

[[_md_quote]]
.Rendered quoting example.
image::images/markdown-05-quote.png[Rendered quoting]

====== Emoji

Finally, you can also use emoji in your comments. This is actually used quite extensively in comments you see on many GitHub Issues and Pull Requests. There is even an emoji helper in GitHub. If you are typing a comment and you start with a `:` character, an autocompleter will help you find what you're looking for.

[[_md_emoji_auto]]
.Emoji autocompleter in action.
image::images/markdown-06-emoji-complete.png[Emoji autocompleter]

Emojis take the form of `:<name>:` anywhere in the comment. For instance, you could write something like this:

[source]
----
I :eyes: that :bug: and I :cold_sweat:.

:trophy: for :microscope: it.

:+1: and :sparkles: on this :ship:, it's :fire::poop:!

:clap::tada::panda_face:
----

When rendered, it would look something like <<_md_emoji>>.

[[_md_emoji]]
.Heavy emoji commenting.
image::images/markdown-07-emoji.png[Emoji]

Not that this is incredibly useful, but it does add an element of fun and emotion to a medium that is otherwise hard to convey emotion in.


[NOTE]
====
There are actually quite a number of web services that make use of emoji characters these days. A great cheat sheet to reference to find emoji that expresses what you want to say can be found at:

http://www.emoji-cheat-sheet.com
====

====== Images

This isn't technically GitHub Flavored Markdown, but it is incredibly useful. In addition to adding Markdown image links to comments, which can be difficult to find and embed URLs for, GitHub allows you to drag and drop images into text areas to embed them.

[[_md_drag]]
.Drag and drop images to upload them and auto-embed them.
image::images/markdown-08-drag-drop.png[Drag and drop images]

If you look back at <<_pr_references>>, you can see a small ``Parsed as Markdown'' hint above the text area. Clicking on that will give you a full cheat sheet of everything you can do with Markdown on GitHub.
