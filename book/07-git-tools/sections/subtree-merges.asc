[[_subtree_merge]]
===== Fusión de Subárbol

La idea de la fusión del subárbol es que tiene dos proyectos, y uno de los proyectos se asigna a un subdirectorio del otro y viceversa.
Cuando especifica una fusión de subárbol, Git suele ser lo suficientemente inteligente como para darse cuenta de que uno es un subárbol del otro y se fusiona adecuadamente.

Veremos un ejemplo de cómo agregar un proyecto separado a un proyecto existente y luego fusionar el código del segundo en un subdirectorio del primero.

Primero, agregaremos la aplicación Rack a nuestro proyecto.
Agregaremos el proyecto Rack como una referencia remota en nuestro propio proyecto y luego lo comprobaremos en su propia rama:

[source,console]
----
$ git remote add rack_remote https://github.com/rack/rack
$ git fetch rack_remote
warning: no common commits
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
From https://github.com/rack/rack
 * [new branch]      build      -> rack_remote/build
 * [new branch]      master     -> rack_remote/master
 * [new branch]      rack-0.4   -> rack_remote/rack-0.4
 * [new branch]      rack-0.9   -> rack_remote/rack-0.9
$ git checkout -b rack_branch rack_remote/master
Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.
Switched to a new branch "rack_branch"
----

Ahora tenemos la raíz del proyecto Rack en nuestra rama `rack_branch` y nuestro propio proyecto en la rama `master`.
Si echa un vistazo a uno y luego al otro, puede ver que tienen diferentes raíces de proyecto:

[source,console]
----
$ ls
AUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib
COPYING         README         bin           example         test
$ git checkout master
Switched to branch "master"
$ ls
README
----

Este es un concepto extraño. No todas las ramas en su repositorio en realidad tienen que ser ramas del mismo proyecto. No es común porque raramente es útil, pero es bastante fácil tener ramas que contengan historias completamente diferentes.

En este caso, queremos incluir el proyecto Rack en nuestro proyecto `master` como subdirectorio.
Podemos hacer eso en Git con `git read-tree`.
Aprenderá más sobre `read-tree` y sus amigos en <<_git_internals>>, pero por ahora, sepa que lee el árbol raíz de una rama en su área de ensayo y directorio de trabajo actuales.
Acabamos de volver a su rama `master`, y halamos la rama `rack_branch` dentro del subdirectorio `rack` de nuestra rama `master` de nuestro proyecto principal:

[source,console]
----
$ git read-tree --prefix=rack/ -u rack_branch
----

Cuando hacemos commit, parece que tenemos todos los archivos de Rack en ese subdirectorio – como si los hubiéramos copiado desde un tarball.
Lo que se vuelve interesante es que podemos fusionar con bastante facilidad los cambios de una de las ramas a la otra.
Por lo tanto, si el proyecto de Rack se actualiza, podemos implementar los cambios iniciales al cambiar a esa rama y extraer:

[source,console]
----
$ git checkout rack_branch
$ git pull
----

Entonces, podemos fusionar los cambios nuevamente en nuestra rama `master`.
Para incorporar los cambios y rellenar previamente el mensaje del commit, use las opciones `--squash` y `--no-commit`, así como también la opción `-Xsubtree` de la estrategia de fusión recursiva. (La estrategia recursiva es la predeterminada aquí, pero la incluimos para mayor claridad).

[source,console]
----
$ git checkout master
$ git merge --squash -s recursive -Xsubtree=rack --no-commit rack_branch
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
----

Todos los cambios del proyecto Rack se fusionan y están listos para hacerles commit localmente.
También puede hacer lo opuesto – realizar cambios en el subdirectorio `rack` de su rama principal y luego combinarlos en su rama `rack_branch` más tarde para enviarlos a los mantenedores o empujarlos hacia arriba.

Esto nos da una manera de tener un flujo de trabajo similar al flujo de trabajo del submódulo sin usar submódulos (que trataremos en <<_git_submodules>>). Podemos mantener ramas con otros proyectos relacionados en nuestro repositorio y hacerles fusión de subárbol en nuestro proyecto de vez en cuando. Es bueno de alguna manera, por ejemplo, a todo el código se le ha hecho commit en un solo lugar. Sin embargo, tiene otros inconvenientes, ya que es un poco más complejo y más fácil cometer errores en la reintegración de cambios o al empujar accidentalmente una rama hacia un repositorio no relacionado.

Otra cosa un poco extraña es que para obtener una diferencia entre lo que tienes en tu subdirectorio `rack` y el código en tu rama `rack_branch` – para ver si necesitas fusionarlos – no puedes usar el comando `diff` normal .
En su lugar, debe ejecutar `git diff-tree` con la rama con la que desea comparar:

[source,console]
----
$ git diff-tree -p rack_branch
----

O, para comparar lo que está en el subdirectorio `rack` con lo que la rama `master` del servidor fué la última vez que buscó, puede ejecutar

[source,console]
----
$ git diff-tree -p rack_remote/master
----
