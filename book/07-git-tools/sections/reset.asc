[[_git_reset]]
=== Reiniciar Desmitificado

Antes de pasar a herramientas más especializadas, hablemos de `reset` y `checkout`.
Estos comandos son dos de las partes más confusas de Git cuando los encuentras por primera vez. Hacen tantas cosas que parece imposible comprenderlas realmente y emplearlas adecuadamente.
Para esto, recomendamos una metáfora simple.

==== Los Tres Árboles

Una manera más fácil de pensar sobre `reset` y `checkout` es a través del marco mental de Git como administrador de contenido de tres árboles diferentes.
Por ``árbol'' aquí realmente queremos decir ``colección de archivos'', no específicamente la estructura de datos.
(Hay algunos casos donde el índice no funciona exactamente como un árbol, pero para nuestros propósitos es más fácil pensarlo de esta manera por ahora).

Git como sistema maneja y manipula tres árboles en su operación normal:

[cols="1,2",options="header"]
|================================
| Árbol              | Rol
| HEAD              | Última instantánea del commit, próximo padre
| Índice             | Siguiente instantánea del commit propuesta
| Directorio de Trabajo | Caja de Arena
|================================

===== El HEAD

HEAD es el puntero a la referencia de bifurcación actual, que es, a su vez, un puntero al último commit realizado en esa rama.
Eso significa que HEAD será el padre del próximo commit que se cree.
En general, es más simple pensar en HEAD como la instantánea de *su última commit*.

De hecho, es bastante fácil ver cómo se ve esa instantánea.
Aquí hay un ejemplo de cómo obtener la lista del directorio real y las sumas de comprobación SHA-1 para cada archivo en la instantánea de HEAD:

[source,console]
----
$ git cat-file -p HEAD
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
author Scott Chacon  1301511835 -0700
committer Scott Chacon  1301511835 -0700

commit inicial

$ git ls-tree -r HEAD
100644 blob a906cb2a4a904a152...   README
100644 blob 8f94139338f9404f2...   Rakefile
040000 tree 99f1a6d12cb4b6f19...   lib
----

Los comandos `cat-file` y `ls-tree` son comandos de ``fontanería'' que se usan para cosas de nivel inferior y que no se usan realmente en el trabajo diario, pero nos ayudan a ver qué está sucediendo aquí.

[[_the_index]]
===== El Índice

El índice es su *siguiente commit propuesta*. También nos hemos estado refiriendo a este concepto como el ``Área de Preparación'' de Git ya que esto es lo que Git ve cuando ejecutas `git commit`.

Git rellena este índice con una lista de todos los contenidos del archivo que fueron revisados por última vez en su directorio de trabajo y cómo se veían cuando fueron revisados originalmente.
A continuación, reemplace algunos de esos archivos con nuevas versiones de ellos, y `git commit` los convierte en el árbol para una nueva commit.

[source,console]
----
$ git ls-files -s
100644 a906cb2a4a904a152e80877d4088654daad0c859 0	README
100644 8f94139338f9404f26296befa88755fc2598c289 0	Rakefile
100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0	lib/simplegit.rb
----

Nuevamente, aquí estamos usando `ls-files`, que es más un comando entre bastidores que le muestra a qué se parece actualmente su índice.

El índice no es técnicamente una estructura de árbol – en realidad se implementa como un manifiesto aplanado – pero para nuestros propósitos, es lo suficientemente cerca.

===== El Directorio de Trabajo

Finalmente, tienes tu directorio de trabajo.
Los otros dos árboles almacenan su contenido de manera eficiente pero inconveniente, dentro de la carpeta `.git`.
El Directorio de trabajo los descomprime en archivos reales, lo que hace que sea mucho más fácil para usted editarlos.
Piense en el Directorio de Trabajo como una *caja de arena*, donde puede probar los cambios antes de enviarlos a su área de ensayo (índice) y luego al historial.

[source,console]
----
$ tree
.
├── README
├── Rakefile
└── lib
    └── simplegit.rb

1 directory, 3 files
----

==== El Flujo de Trabajo

El objetivo principal de Git es registrar instantáneas de su proyecto en estados sucesivamente mejores, mediante la manipulación de estos tres árboles.

image::images/reset-workflow.png[]

Visualicemos este proceso: digamos que ingresa en un nuevo directorio con un solo archivo.
Llamaremos a esto *v1* del archivo, y lo indicaremos en azul.
Ahora ejecutamos `git init`, que creará un repositorio Git con una referencia HEAD que apunta a una rama no nacida (`master` aún no existe).

image::images/reset-ex1.png[]

En este punto, solo el árbol del Directorio de Trabajo tiene cualquier contenido.

Ahora queremos hacer commit a este archivo, por lo que usamos `git add` para tomar contenido en el directorio de trabajo y copiarlo en el índice.

image::images/reset-ex2.png[]

Luego ejecutamos `git commit`, que toma los contenidos del índice y los guarda como una instantánea permanente, crea un objeto de commit que apunta a esa instantánea y actualiza `master` para apuntar a esa commit.

image::images/reset-ex3.png[]

Si ejecutamos `git status`, no veremos ningún cambio, porque los tres árboles son iguales.

Ahora queremos hacer un cambio en ese archivo y hacerle commit.
Pasaremos por el mismo proceso; primero, cambiamos el archivo en nuestro directorio de trabajo.
Llamemos a esto *v2* del archivo, y lo indicamos en rojo.

image::images/reset-ex4.png[]

Si ejecutamos `git status` ahora, veremos el archivo en rojo como ``Changes not staged for commit'' porque esa entrada difiere entre el índice y el directorio de trabajo.
A continuación, ejecutamos `git add` para ubicarlo en nuestro índice.

image::images/reset-ex5.png[]

En este punto si ejecutamos `git status` veremos el archivo en verde
debajo de ``Changes to be committed'' porque el Índice y el HEAD difieren – es decir, nuestro siguiente commit propuesta ahora es diferente de nuestra última commit.
Finalmente, ejecutamos `git commit` para finalizar el commit.

image::images/reset-ex6.png[]

Ahora `git status` no nos dará salida, porque los tres árboles son iguales nuevamente.

El cambio de ramas o la clonación pasa por un proceso similar.
Cuando verifica una rama, eso cambia *HEAD* para que apunte a la nueva ref de la rama, rellena su *Índice* con la instantánea de esa confirmación, luego copia los contenidos del *Índice* en su *Directorio de Trabajo*.

==== El Papel del Reinicio

El comando `reset` tiene más sentido cuando se ve en este contexto.

A los fines de estos ejemplos, digamos que hemos modificado `file.txt` de nuevo y lo hemos hecho commit por tercera vez. Entonces ahora nuestra historia se ve así:

image::images/reset-start.png[]

Caminemos ahora a través de exactamente lo que `reset` hace cuando lo llama. Manipula directamente estos tres árboles de una manera simple y predecible.
Hace hasta tres operaciones básicas.

===== Paso 1: mover HEAD

Lo primero que `reset` hará es mover a lo que HEAD apunta.
Esto no es lo mismo que cambiar HEAD en sí mismo (que es lo que hace `checkout`); `reset` mueve la rama a la que HEAD apunta.
Esto significa que si HEAD está configurado en la rama `master` (es decir, usted está actualmente en la rama `master`), ejecutar `git reset 9e5e64a` comenzará haciendo que `master` apunte a `9e5e64a`.

image::images/reset-soft.png[]

No importa qué forma de `reset` con un commit invoque ustéd, esto es lo primero que siempre intentará hacer.
Con `reset --soft`, simplemente se detendrá allí.

Ahora tómese un segundo para mirar ese diagrama y darse cuenta de lo que sucedió: esencialmente deshizo el último comando `git commit`.
Cuando ejecuta `git commit`, Git crea una nueva confirmación y mueve la rama a la que apunta HEAD.
Cuando haces `reset` de vuelta a `HEAD~` (el padre de HEAD), está volviendo a colocar la rama donde estaba, sin cambiar el índice o el Directorio de Trabajo.
Ahora puedes actualizar el índice y ejecutar `git commit` nuevamente para lograr lo que `git commit --amend` hubiera hecho (ver <<_git_amend>>).

===== Step 2: Updating the Index (--mixed)

Note that if you run `git status` now you'll see in green the difference between the Index and what the new HEAD is.

The next thing `reset` will do is to update the Index with the contents of whatever snapshot HEAD now points to.

image::images/reset-mixed.png[]

If you specify the `--mixed` option, `reset` will stop at this point.
This is also the default, so if you specify no option at all (just `git reset HEAD~` in this case), this is where the command will stop.

Now take another second to look at that diagram and realize what happened: it still undid your last `commit`, but also _unstaged_ everything.
You rolled back to before you ran all your `git add` and `git commit` commands.

===== Step 3: Updating the Working Directory (--hard)

The third thing that `reset` will do is to make the Working Directory look like the Index.
If you use the `--hard` option, it will continue to this stage.

image::images/reset-hard.png[]

So let's think about what just happened.
You undid your last commit, the `git add` and `git commit` commands, **and** all the work you did in your working directory.

It's important to note that this flag (`--hard`) is the only way to make the `reset` command dangerous, and one of the very few cases where Git will actually destroy data.
Any other invocation of `reset` can be pretty easily undone, but the `--hard` option cannot, since it forcibly overwrites files in the Working Directory.
In this particular case, we still have the *v3* version of our file in a commit in our Git DB, and we could get it back by looking at our `reflog`, but if we had not committed it, Git still would have overwritten the file and it would be unrecoverable.

===== Recap

The `reset` command overwrites these three trees in a specific order, stopping when you tell it to:

1. Move the branch HEAD points to _(stop here if `--soft`)_
2. Make the Index look like HEAD _(stop here unless `--hard`)_
3. Make the Working Directory look like the Index

==== Reset With a Path

That covers the behavior of `reset` in its basic form, but you can also provide it with a path to act upon.
If you specify a path, `reset` will skip step 1, and limit the remainder of its actions to a specific file or set of files.
This actually sort of makes sense – HEAD is just a pointer, and you can't point to part of one commit and part of another.
But the Index and Working directory _can_ be partially updated, so reset proceeds with steps 2 and 3.

So, assume we run `git reset file.txt`.
This form (since you did not specify a commit SHA-1 or branch, and you didn't specify `--soft` or `--hard`) is shorthand for `git reset --mixed HEAD file.txt`, which will:

1. Move the branch HEAD points to _(skipped)_
2. Make the Index look like HEAD _(stop here)_

So it essentially just copies `file.txt` from HEAD to the Index.

image::images/reset-path1.png[]

This has the practical effect of _unstaging_ the file.
If we look at the diagram for that command and think about what `git add` does, they are exact opposites.

image::images/reset-path2.png[]

This is why the output of the `git status` command suggests that you run this to unstage a file.
(See <<_unstaging>> for more on this.)

We could just as easily not let Git assume we meant ``pull the data from HEAD'' by specifying a specific commit to pull that file version from.
We would just run something like `git reset eb43bf file.txt`.

image::images/reset-path3.png[]

This effectively does the same thing as if we had reverted the content of the file to *v1* in the Working Directory, ran `git add` on it, then reverted it back to *v3* again (without actually going through all those steps).
If we run `git commit` now, it will record a change that reverts that file back to *v1*, even though we never actually had it in our Working Directory again.

It's also interesting to note that like `git add`, the `reset` command will accept a `--patch` option to unstage content on a hunk-by-hunk basis.
So you can selectively unstage or revert content.

==== Squashing

Let's look at how to do something interesting with this newfound power – squashing commits.

Say you have a series of commits with messages like ``oops.'', ``WIP'' and ``forgot this file''.
You can use `reset` to quickly and easily squash them into a single commit that makes you look really smart.
(<<_squashing>> shows another way to do this, but in this example it's simpler to use `reset`.)

Let's say you have a project where the first commit has one file, the second commit added a new file and changed the first, and the third commit changed the first file again.
The second commit was a work in progress and you want to squash it down.

image::images/reset-squash-r1.png[]

You can run `git reset --soft HEAD~2` to move the HEAD branch back to an older commit (the first commit you want to keep):

image::images/reset-squash-r2.png[]

And then simply run `git commit` again:

image::images/reset-squash-r3.png[]

Now you can see that your reachable history, the history you would push, now looks like you had one commit with `file-a.txt` v1, then a second that both modified `file-a.txt` to v3 and added `file-b.txt`. The commit with the v2 version of the file is no longer in the history.


==== Check It Out

Finally, you may wonder what the difference between `checkout` and `reset` is.
Like `reset`, `checkout` manipulates the three trees, and it is a bit different depending on whether you give the command a file path or not.

===== Without Paths

Running `git checkout [branch]` is pretty similar to running `git reset --hard [branch]` in that it updates all three trees for you to look like `[branch]`, but there are two important differences.

First, unlike `reset --hard`, `checkout` is working-directory safe; it will check to make sure it's not blowing away files that have changes to them.
Actually, it's a bit smarter than that – it tries to do a trivial merge in the Working Directory, so all of the files you _haven't_ changed in  will be updated.
`reset --hard`, on the other hand, will simply replace everything across the board without checking.

The second important difference is how it updates HEAD.
Where `reset` will move the branch that HEAD points to, `checkout` will move HEAD itself to point to another branch.

For instance, say we have `master` and `develop` branches which point at different commits, and we're currently on `develop` (so HEAD points to it).
If we run `git reset master`, `develop` itself will now point to the same commit that `master` does.
If we instead run `git checkout master`, `develop` does not move, HEAD itself does.
HEAD will now point to `master`.

So, in both cases we're moving HEAD to point to commit A, but _how_ we do so is very different.
`reset` will move the branch HEAD points to, `checkout` moves HEAD itself.

image::images/reset-checkout.png[]

===== With Paths

The other way to run `checkout` is with a file path, which, like `reset`, does not move HEAD.
It is just like `git reset [branch] file` in that it updates the index with that file at that commit, but it also overwrites the file in the working directory.
It would be exactly like `git reset --hard [branch] file` (if `reset` would let you run that) – it's not working-directory safe, and it does not move HEAD.

Also, like `git reset` and `git add`, `checkout` will accept a `--patch` option to allow you to selectively revert file contents on a hunk-by-hunk basis.

==== Summary

Hopefully now you understand and feel more comfortable with the `reset` command, but are probably still a little confused about how exactly it differs from `checkout` and could not possibly remember all the rules of the different invocations.

Here's a cheat-sheet for which commands affect which trees.
The ``HEAD'' column reads ``REF'' if that command moves the reference (branch) that HEAD points to, and ``HEAD'' if it moves HEAD itself.
Pay especial attention to the 'WD Safe?' column – if it says *NO*, take a second to think before running that command.

[options="header", cols="3,1,1,1,1"]
|================================
| | HEAD | Index | Workdir | WD Safe?
| *Commit Level* | | | |
| `reset --soft [commit]` | REF | NO | NO | YES
| `reset [commit]` | REF | YES | NO | YES
| `reset --hard [commit]` | REF | YES | YES | *NO*
| `checkout [commit]` | HEAD | YES | YES | YES
| *File Level* | | | |
| `reset (commit) [file]` | NO | YES | NO | YES
| `checkout (commit) [file]` | NO | YES | YES | *NO*
|================================
