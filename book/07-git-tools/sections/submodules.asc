[[_git_submodules]]
=== Submódulos

A menudo ocurre que mientras trabaja en un proyecto, necesita usar otro proyecto desde adentro.
Tal vez se trate de una biblioteca desarrollada por un tercero o que ustéd está desarrollando por separado y que se utiliza en múltiples proyectos principales.
Un problema común surge en estos escenarios: desea poder tratar los dos proyectos como separados y aún así poder usar uno desde el otro.

Aquí hay un ejemplo.
Supongamos que está desarrollando un sitio web y creando feeds Atom.
En lugar de escribir su propio código de generación de Atom, decide usar una biblioteca.
Es probable que tenga que incluir este código de una biblioteca compartida, como una instalación CPAN o Ruby gem, o copiar el código fuente en su propio árbol de proyectos.
El problema con la inclusión de la biblioteca es que es difícil personalizar la biblioteca de alguna manera y, a menudo, es más difícil de implementar, porque debe asegurarse de que cada cliente tenga esa biblioteca disponible.
El problema con el envío del código a su propio proyecto es que cualquier cambio personalizado que realice es difícil de fusionar cuando estén disponibles los cambios de upstream.

Git aborda este problema utilizando submódulos.
Los submódulos le permiten mantener un repositorio de Git como un subdirectorio de otro repositorio de Git.
Esto le permite clonar otro repositorio en su proyecto y mantener sus commits separados.

[[_starting_submodules]]
==== Comenzando con los Submódulos

Pasaremos por el desarrollo de un proyecto simple que se ha dividido en un proyecto principal y algunos subproyectos.

Comencemos agregando un repositorio de Git existente como un submódulo del repositorio en el que estamos trabajando. Para agregar un nuevo submódulo, use el comando `git submodule add` con la URL del proyecto que desea empezar a rastrear. En este ejemplo, agregaremos una biblioteca llamada ``DbConnector''.

[source,console]
----
$ git submodule add https://github.com/chaconinc/DbConnector
Cloning into 'DbConnector'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done.
----

Por defecto, los submódulos agregarán el subproyecto a un directorio llamado igual que el repositorio, en este caso ``DbConnector''. Puede agregar una ruta diferente al final del comando si desea que vaya a otra parte.

Si ejecuta `git status` en este punto, notará algunas cosas.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   .gitmodules
	new file:   DbConnector
----

En primer lugar, debe observar el nuevo archivo `.gitmodules`.
Este es un archivo de configuración que almacena la asignación entre la URL del proyecto y el subdirectorio local en el que lo ha insertado:

[source,console]
----
$ cat .gitmodules
[submodule "DbConnector"]
	path = DbConnector
	url = https://github.com/chaconinc/DbConnector
----

Si tiene múltiples submódulos, tendrá múltiples entradas en este archivo.
Es importante tener en cuenta que este archivo está controlado por la versión con sus otros archivos, como su archivo `.gitignore`.
Se empuja y hala con el resto de su proyecto.
Así es como otras personas que clonan este proyecto saben de dónde obtener los proyectos de submódulos.

[NOTA]
=====
Dado que la URL en el archivo .gitmodules es lo que otras personas intentarán primero clonar/buscar, asegúrese de usar una URL a la que puedan acceder si es posible. Por ejemplo, si usa una URL diferente a la que presionar para que otros la utilicen, utilice aquella a la que otros tienen acceso. Puede sobrescribir este valor localmente con `git config submodule.DbConnector.url PRIVATE_URL` para su propio uso.
=====

La otra lista en el resultado `git status` es la entrada de la carpeta del proyecto.
Si ejecuta `git diff` sobre eso, verá algo interesante:

[source,console]
----
$ git diff --cached DbConnector
diff --git a/DbConnector b/DbConnector
new file mode 160000
index 0000000..c3f01dc
--- /dev/null
+++ b/DbConnector
@@ -0,0 +1 @@
+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc
----

Aunque `DbConnector` es un subdirectorio en su directorio de trabajo, Git lo ve como un submódulo y no rastrea su contenido cuando usted no está en ese directorio.
En cambio, Git lo ve como un commit particular de ese repositorio.

Si quieres una mejor salida de diff, puedes pasar la opción `--submodule` a `git diff`.

[source,console]
----
$ git diff --cached --submodule
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..71fc376
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "DbConnector"]
+       path = DbConnector
+       url = https://github.com/chaconinc/DbConnector
Submodule DbConnector 0000000...c3f01dc (new submodule)
----

Cuando hace commit, ve algo como esto:

[source,console]
----
$ git commit -am 'added DbConnector module'
[master fb9093c] added DbConnector module
 2 files changed, 4 insertions(+)
 create mode 100644 .gitmodules
 create mode 160000 DbConnector
----

Observe el modo `160000` para la entrada` DbConnector`.
Ese es un modo especial en Git que básicamente significa que está registrando una confirmación como una entrada de directorio en lugar de un subdirectorio o un archivo.

[[_cloning_submodules]]
==== Clonación de un Proyecto con Submódulos

Aquí clonaremos un proyecto con un submódulo.
Cuando clona tal proyecto, de forma predeterminada obtiene los directorios que contienen submódulos, pero ninguno de los archivos dentro de ellos aún:

[source,console]
----
$ git clone https://github.com/chaconinc/MainProject
Cloning into 'MainProject'...
remote: Counting objects: 14, done.
remote: Compressing objects: 100% (13/13), done.
remote: Total 14 (delta 1), reused 13 (delta 0)
Unpacking objects: 100% (14/14), done.
Checking connectivity... done.
$ cd MainProject
$ ls -la
total 16
drwxr-xr-x   9 schacon  staff  306 Sep 17 15:21 .
drwxr-xr-x   7 schacon  staff  238 Sep 17 15:21 ..
drwxr-xr-x  13 schacon  staff  442 Sep 17 15:21 .git
-rw-r--r--   1 schacon  staff   92 Sep 17 15:21 .gitmodules
drwxr-xr-x   2 schacon  staff   68 Sep 17 15:21 DbConnector
-rw-r--r--   1 schacon  staff  756 Sep 17 15:21 Makefile
drwxr-xr-x   3 schacon  staff  102 Sep 17 15:21 includes
drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 scripts
drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 src
$ cd DbConnector/
$ ls
$
----

El directorio `DbConnector` está ahí, pero está vacío.
Debe ejecutar dos comandos: `git submodule init` para inicializar su archivo de configuración local, y `git submodule update` para buscar todos los datos de ese proyecto y verifique la commit adecuada que figura en su superproyecto:

[source,console]
----
$ git submodule init
Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'
$ git submodule update
Cloning into 'DbConnector'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done.
Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc'
----

Ahora su subdirectorio `DbConnector` está en el estado exacto en el que estaba cuando hizo commit antes.

Sin embargo, hay otra manera de hacer esto que es un poco más simple. Si pasa `--recursive` al comando `git clone`, se inicializará y actualizará automáticamente cada submódulo en el repositorio.

[source,console]
----
$ git clone --recursive https://github.com/chaconinc/MainProject
Cloning into 'MainProject'...
remote: Counting objects: 14, done.
remote: Compressing objects: 100% (13/13), done.
remote: Total 14 (delta 1), reused 13 (delta 0)
Unpacking objects: 100% (14/14), done.
Checking connectivity... done.
Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'
Cloning into 'DbConnector'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done.
Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc'
----

==== Trabajando en un Proyecto con Submódulos

Ahora tenemos una copia de un proyecto con submódulos y colaboraremos con nuestros compañeros de equipo tanto en el proyecto principal como en el proyecto de submódulo.

===== Llegada de los Cambios de Upstream

El modelo más simple de usar submódulos en un proyecto sería si simplemente consumiera un subproyecto y quisiera obtener actualizaciones de él de vez en cuando, pero en realidad no estuviera modificando nada en el proceso de pago. Veamos un ejemplo simple allí.

Si desea buscar trabajo nuevo en un submódulo, puede acceder al directorio y ejecutar `git fetch` y `git merge` en la rama upstream para actualizar el código local.

[source,console]
----
$ git fetch
From https://github.com/chaconinc/DbConnector
   c3f01dc..d0354fc  master     -> origin/master
$ git merge origin/master
Updating c3f01dc..d0354fc
Fast-forward
 scripts/connect.sh | 1 +
 src/db.c           | 1 +
 2 files changed, 2 insertions(+)
----

Ahora, si vuelve al proyecto principal y ejecuta `git diff --submodule` puede ver que el submódulo se actualizó y obtener una lista de commits que se le agregaron. Si no desea escribir `--submodule` cada vez que ejecuta `git diff`, puede establecerlo como el formato predeterminado configurando el valor de configuración `diff.submodule` en ``log''.

[source,console]
----
$ git config --global diff.submodule log
$ git diff
Submodule DbConnector c3f01dc..d0354fc:
  > more efficient db routine
  > better connection routine
----

Si hace commit en este punto, bloqueará el submódulo para que tenga el nuevo código cuando otras personas lo actualicen.

También hay una forma más sencilla de hacer esto si prefiere no buscar y fusionar manualmente en el subdirectorio. Si ejecuta `git submodule update --remote`, Git irá a sus submódulos y buscará y actualizará por usted.

[source,console]
----
$ git submodule update --remote DbConnector
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   3f19983..d0354fc  master     -> origin/master
Submodule path 'DbConnector': checked out 'd0354fc054692d3906c85c3af05ddce39a1c0644'
----

Este comando asumirá de forma predeterminada que desea actualizar el pago a la rama `master` del repositorio de submódulos. Sin embargo, puede establecer esto en algo diferente si lo desea. Por ejemplo, si desea que el submódulo DbConnector rastree la rama ``stable'' del repositorio, puede configurarlo en su archivo `.gitmodules` (para que todos los demás también lo rastreen), o simplemente en su archivo `.git/config` local. Vamos a configurarlo en el archivo `.gitmodules`:

[source,console]
----
$ git config -f .gitmodules submodule.DbConnector.branch stable

$ git submodule update --remote
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   27cf5d3..c87d55d  stable -> origin/stable
Submodule path 'DbConnector': checked out 'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687'
----

Si deja de lado los `-f .gitmodules`, solo hará el cambio por usted, pero probablemente tenga más sentido rastrear esa información con el repositorio para que todos los demás también lo hagan.

Cuando ejecutamos `git status` en este punto, Git nos mostrará que tenemos ``new commits'' en el submódulo.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   .gitmodules
  modified:   DbConnector (new commits)

no changes added to commit (use "git add" and/or "git commit -a")
----

Si configura `status.submodulesummary`, Git también le mostrará un breve resumen de los cambios a sus submódulos:

[source,console]
----
$ git config status.submodulesummary 1

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   .gitmodules
	modified:   DbConnector (new commits)

Submodules changed but not updated:

* DbConnector c3f01dc...c87d55d (4):
  > catch non-null terminated lines
----

En este punto, si ejecuta `git diff` podemos ver que hemos modificado nuestro archivo `.gitmodules` y también que hay un número de commits que hemos eliminado y estamos listos para hacer commit a nuestro proyecto de submódulo.

[source,console]
----
$ git diff
diff --git a/.gitmodules b/.gitmodules
index 6fc0b3d..fd1cc29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,4 @@
 [submodule "DbConnector"]
        path = DbConnector
        url = https://github.com/chaconinc/DbConnector
+       branch = stable
 Submodule DbConnector c3f01dc..c87d55d:
  > catch non-null terminated lines
  > more robust error handling
  > more efficient db routine
  > better connection routine
----

Esto está muy bien como podemos ver realmente el log de los commits a los que estamos a punto de hacer commit en nuestro submódulo. Una vez hecho el commit, usted puede ver esta información después del hecho también cuando usted ejecuta `git log -p`.

[source,console]
----
$ git log -p --submodule
commit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae
Author: Scott Chacon <schacon@gmail.com>
Date:   Wed Sep 17 16:37:02 2014 +0200

    updating DbConnector for bug fixes

diff --git a/.gitmodules b/.gitmodules
index 6fc0b3d..fd1cc29 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,4 @@
 [submodule "DbConnector"]
        path = DbConnector
        url = https://github.com/chaconinc/DbConnector
+       branch = stable
Submodule DbConnector c3f01dc..c87d55d:
  > catch non-null terminated lines
  > more robust error handling
  > more efficient db routine
  > better connection routine
----

Git intentará por defecto actualizar **all** sus submódulos cuando ejecute `git submodule update --remote` así que si usted tiene muchos de ellos, puede que quiera poner el nombre solamente del submódulo que usted quiera intentar actualizar.

===== Trabajando en un submódulo

Es muy probable que si usted está usando submódulos, lo está haciendo porque de verdad quiere trabajar en el código en el submódulo al mismo tiempo que está trabajando en el código en el proyecto principal (o a través de varios submóduos). Si no, usted, probablemente, en su lugar, estaría usando un sistema de administración de dependencias más simple (tal como Maven o Rubygems).

Y ahora veamos un ejemplo de hacer cambios a un submódulo al mismo tiempo que al proyecto principal y haciendo commit y aplicando esos cambios al mismo tiempo.

Hasta aquí, cuando ejecutábamos el comando `git submodule update` para traer cambios desde los repertorios de submódulos, Git obtendría los cambios y actualizaría los archivos en el subdirectorio, pero dejaría el sub-repositorio en lo que se llama un estado ``detached HEAD''. Esto significa que no hay una rama de trabajo local (como ``master'', por ejemplo) rastreando los cambios. Así que cualquier cambio que usted esté haciendo no está siendo rastreado tampoco.

Con el fin de configurar su submódulo para que sea más fácil de entrar y piratear, usted necesita hacer dos cosas. Necesita ir a cada submódulo e ir a una rama para trabajar. Luego necesita decirle a Git qué hacer si usted ha hecho cambios y después `git submodule update --remote` aplica nuevo trabajo de upstream. Las opciones son que usted puede unirlas en su trabajo local, o puede intentar hacer rebase a su trabajo local en lo más alto de los nuevos cambios.

Primero que nada, entremos en nuestro directorio de submódulos y vamos a una rama.

[source,console]
----
$ git checkout stable
Switched to branch 'stable'
----

Intentémoslo con la opción ``merge''. Para especificarlo manualmente, podemos añadir la opción `--merge` a nuestra solicitud `update`. Aquí veremos que hubo un cambio en el servidor para este submódulo y que este se fusiona.

[source,console]
----
$ git submodule update --remote --merge
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 2), reused 4 (delta 2)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   c87d55d..92c7337  stable     -> origin/stable
Updating c87d55d..92c7337
Fast-forward
 src/main.c | 1 +
 1 file changed, 1 insertion(+)
Submodule path 'DbConnector': merged in '92c7337b30ef9e0893e758dac2459d07362ab5ea'
----

Si vamos al directorio "DbConnector", tenemos los nuevos cambios ya fusionados en nuestra rama local `stable`. Ahora veamos qué pasa cuando hacemos nuestro propio cambio local a la biblioteca y alguien más pone otro cambio upstream al mismo tiempo.

[source,console]
----
$ cd DbConnector/
$ vim src/db.c
$ git commit -am 'unicode support'
[stable f906e16] unicode support
 1 file changed, 1 insertion(+)
----

Ahora, si actualizamos nuestro submódulo, podemos ver qué pasa cuando hemos hecho un cambio local y un upstream también tiene un cambio que necesitamos incorporar.

[source,console]
----
$ git submodule update --remote --rebase
First, rewinding head to replay your work on top of it...
Applying: unicode support
Submodule path 'DbConnector': rebased into '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'
----

Si olvidas el `--rebase` o el `--merge`, Git actualizará el submódulo a lo que sea que esté en el servidor y reiniciará su proyecto a un estado HEAD desconectado.

[source,console]
----
$ git submodule update --remote
Submodule path 'DbConnector': checked out '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'
----

Si esto pasa, no se preocupe, usted puede simplemente regresar al directorio e ir a su rama de nuevo (la cual aún contendrá su trabajo) y unir o hacer rebase `origin/stable` (o cualquier rama remota que quiera) manualmente.

Si no ha hecho commit a sus cambios en su submódulo y ejecuta una actualización de submódulo que podría causar problemas, Git buscará los cambios, pero no sobrescribirá el trabajo no guardado en su directorio de submódulos.

[source,console]
----
$ git submodule update --remote
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 4 (delta 0), reused 4 (delta 0)
Unpacking objects: 100% (4/4), done.
From https://github.com/chaconinc/DbConnector
   5d60ef9..c75e92a  stable     -> origin/stable
error: Your local changes to the following files would be overwritten by checkout:
	scripts/setup.sh
Please, commit your changes or stash them before you can switch branches.
Aborting
Unable to checkout 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector'
----

Si usted hizo cambios que hagan conflicto con algo cambiado en upstream, Git se lo hará saber cuando usted ejecute la actualización.

[source,console]
----
$ git submodule update --remote --merge
Auto-merging scripts/setup.sh
CONFLICT (content): Merge conflict in scripts/setup.sh
Recorded preimage for 'scripts/setup.sh'
Automatic merge failed; fix conflicts and then commit the result.
Unable to merge 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector'
----

Usted puede ir al directorio de submódulos y arrglar el conflicto como lo haría normalmente.

[[_publishing_submodules]]
===== Publishing Submodule Changes

Ahora tenemos algunos cambios en nuestro directorio de submódulos. Algunos de estos fueron traídos mediante upstream por nuestras actualizaciones y otros fueron hechos localmente y no están disponibles para nadie aún, ya que no los hemos aplicado todavía.

[source,console]
----
$ git diff
Submodule DbConnector c87d55d..82d2ad3:
  > Merge from origin/stable
  > updated setup script
  > unicode support
  > remove unnecessary method
  > add new option for conn pooling
----

Si hacemos commit en el proyecto principal y lo subimos sin subir los cambios de submódulos también, las otras personas que intenten verificar nuestros cambios van a tener problemas ya que no tendrán forma de obtener los cambios de submódulos que que son necesarios. Estos cambios solo existirán en nuestra copia local.

Con el fin de asegurarnos de que esto no ocurra, usted puede pedirle a Git que revise que todos los submódulos han sido aplicados correctamente antes de aplicar el proyecto principal. El comando `git push` toma el argumento `--recurse-submodules` el cual puede estar listo para ``check'' o ``on-demand''. La opción ``check'' hará simplemente fallar a `push` si alguno de los cambios de los submódulos en commit no han sido aplicados.

[source,console]
----
$ git push --recurse-submodules=check
The following submodule paths contain changes that can
not be found on any remote:
  DbConnector

Please try

	git push --recurse-submodules=on-demand

or cd to the path and use

	git push

to push them to a remote.
----

Como puede ver, también nos da un consejo útil de qué podríamos querer hacer a continuación. La opción simple es ir a cada submódulo y aplicar manualmente a los remotos para asegurarse de que ellos están disponibles externamente y luego intentar este aplique de nuevo.

La otra opción es usar el valor ``on-demand'', el cual intentará hacer esto por usted.

[source,console]
----
$ git push --recurse-submodules=on-demand
Pushing submodule 'DbConnector'
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (8/8), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 3), reused 0 (delta 0)
To https://github.com/chaconinc/DbConnector
   c75e92a..82d2ad3  stable -> stable
Counting objects: 2, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 266 bytes | 0 bytes/s, done.
Total 2 (delta 1), reused 0 (delta 0)
To https://github.com/chaconinc/MainProject
   3d6d338..9a377d1  master -> master
----

Como puede ver ahí, Git fue al módulo "DbConnector" y lo aplicó luego de aplicar el proyecto principal. Si el aplicado de ese submódulo falla por alguna razón, el aplicado del proyecto principal también fallará.

===== Uniendo cambios de submódulo

Si usted cambia una referencia de submódulo al mismo tiempo que alguien más, puede que se encuentre con algunos problemas. Esto es, si los historiales de los submódulos han discrepado y están en commit para divergir ramas en un subproyecto, puede que le tome un poco de tiempo arreglarlo.

Si alguno de los commit es un predecesor directo del otro (una unión de avance rápido), entonces Git simplemente elegirá el último para la unión, por lo que funciona bien.

Git no intentará ni siquiera una unión trivial para usted. Sin embargo, si los commits de los submódulos divergen y necesitan ser unidos, usted tendrá algo parecido a esto:

[source,console]
----
$ git pull
remote: Counting objects: 2, done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 2 (delta 1), reused 2 (delta 1)
Unpacking objects: 100% (2/2), done.
From https://github.com/chaconinc/MainProject
   9a377d1..eb974f8  master     -> origin/master
Fetching submodule DbConnector
warning: Failed to merge submodule DbConnector (merge following commits not found)
Auto-merging DbConnector
CONFLICT (submodule): Merge conflict in DbConnector
Automatic merge failed; fix conflicts and then commit the result.
----

Así que básicamente lo que pasó aquí es que GIT ha entendido que las dos ramas registran puntos en el historial de submódulos que discrepan y necesitan ser unidos. Lo explica como ``merge following commits not found'', lo que es confuso, pero explicaremos por qué eso está en un momento.

Para resolver el problema, usted encesita entender en qué estado debería estar el submódulo. Extrañamente, Git no le da realmente mucha información ahí para ayudar, ni siquiera el "SHA-1s" de los commits de ambos lados del historial. Afortunadamente, es simplemente para comprender. Si usted ejecuta `git diff`, puede obtener el "SHA-1s" de los commits registrados en las ambas ramas que usted estaba intentando unir.

[source,console]
----
$ git diff
diff --cc DbConnector
index eb41d76,c771610..0000000
--- a/DbConnector
+++ b/DbConnector
----

So, in this case, `eb41d76` is the commit in our submodule that *we* had and `c771610` is the commit that upstream had. If we go into our submodule directory, it should already be on `eb41d76` as the merge would not have touched it. If for whatever reason it's not, you can simply create and checkout a branch pointing to it.

What is important is the SHA-1 of the commit from the other side. This is what you'll have to merge in and resolve. You can either just try the merge with the SHA-1 directly, or you can create a branch for it and then try to merge that in. We would suggest the latter, even if only to make a nicer merge commit message.

So, we will go into our submodule directory, create a branch based on that second SHA-1 from `git diff` and manually merge.

[source,console]
----
$ cd DbConnector

$ git rev-parse HEAD
eb41d764bccf88be77aced643c13a7fa86714135

$ git branch try-merge c771610
(DbConnector) $ git merge try-merge
Auto-merging src/main.c
CONFLICT (content): Merge conflict in src/main.c
Recorded preimage for 'src/main.c'
Automatic merge failed; fix conflicts and then commit the result.
----

We got an actual merge conflict here, so if we resolve that and commit it, then we can simply update the main project with the result.

[source,console]
----
$ vim src/main.c <1>
$ git add src/main.c
$ git commit -am 'merged our changes'
Recorded resolution for 'src/main.c'.
[master 9fd905e] merged our changes

$ cd .. <2>
$ git diff <3>
diff --cc DbConnector
index eb41d76,c771610..0000000
--- a/DbConnector
+++ b/DbConnector
@@@ -1,1 -1,1 +1,1 @@@
- Subproject commit eb41d764bccf88be77aced643c13a7fa86714135
 -Subproject commit c77161012afbbe1f58b5053316ead08f4b7e6d1d
++Subproject commit 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a
$ git add DbConnector <4>

$ git commit -m "Merge Tom's Changes" <5>
[master 10d2c60] Merge Tom's Changes
----

<1> First we resolve the conflict
<2> Then we go back to the main project directory
<3> We can check the SHA-1s again
<4> Resolve the conflicted submodule entry
<5> Commit our merge

It can be a bit confusing, but it's really not very hard.

Interestingly, there is another case that Git handles.
If a merge commit exists in the submodule directory that contains **both** commits in it's history, Git will suggest it to you as a possible solution. It sees that at some point in the submodule project, someone merged branches containing these two commits, so maybe you'll want that one.

This is why the error message from before was ``merge following commits not found'', because it could not do *this*. It's confusing because who would expect it to **try** to do this?

If it does find a single acceptable merge commit, you'll see something like this:

[source,console]
----
$ git merge origin/master
warning: Failed to merge submodule DbConnector (not fast-forward)
Found a possible merge resolution for the submodule:
 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a: > merged our changes
If this is correct simply add it to the index for example
by using:

  git update-index --cacheinfo 160000 9fd905e5d7f45a0d4cbc43d1ee550f16a30e825a "DbConnector"

which will accept this suggestion.
Auto-merging DbConnector
CONFLICT (submodule): Merge conflict in DbConnector
Automatic merge failed; fix conflicts and then commit the result.
----

What it's suggesting that you do is to update the index like you had run `git add`, which clears the conflict, then commit. You probably shouldn't do this though. You can just as easily go into the submodule directory, see what the difference is, fast-forward to this commit, test it properly, and then commit it.

[source,console]
----
$ cd DbConnector/
$ git merge 9fd905e
Updating eb41d76..9fd905e
Fast-forward

$ cd ..
$ git add DbConnector
$ git commit -am 'Fast forwarded to a common submodule child'
----

This accomplishes the same thing, but at least this way you can verify that it works and you have the code in your submodule directory when you're done.


==== Submodule Tips

There are a few things you can do to make working with submodules a little easier.

===== Submodule Foreach

There is a `foreach` submodule command to run some arbitrary command in each submodule. This can be really helpful if you have a number of submodules in the same project.

For example, let's say we want to start a new feature or do a bugfix and we have work going on in several submodules. We can easily stash all the work in all our submodules.

[source,console]
----
$ git submodule foreach 'git stash'
Entering 'CryptoLibrary'
No local changes to save
Entering 'DbConnector'
Saved working directory and index state WIP on stable: 82d2ad3 Merge from origin/stable
HEAD is now at 82d2ad3 Merge from origin/stable
----

Then we can create a new branch and switch to it in all our submodules.

[source,console]
----
$ git submodule foreach 'git checkout -b featureA'
Entering 'CryptoLibrary'
Switched to a new branch 'featureA'
Entering 'DbConnector'
Switched to a new branch 'featureA'
----

You get the idea. One really useful thing you can do is produce a nice unified diff of what is changed in your main project and all your subprojects as well.

[source,console]
----
$ git diff; git submodule foreach 'git diff'
Submodule DbConnector contains modified content
diff --git a/src/main.c b/src/main.c
index 210f1ae..1f0acdc 100644
--- a/src/main.c
+++ b/src/main.c
@@ -245,6 +245,8 @@ static int handle_alias(int *argcp, const char ***argv)

      commit_pager_choice();

+     url = url_decode(url_orig);
+
      /* build alias_argv */
      alias_argv = xmalloc(sizeof(*alias_argv) * (argc + 1));
      alias_argv[0] = alias_string + 1;
Entering 'DbConnector'
diff --git a/src/db.c b/src/db.c
index 1aaefb6..5297645 100644
--- a/src/db.c
+++ b/src/db.c
@@ -93,6 +93,11 @@ char *url_decode_mem(const char *url, int len)
        return url_decode_internal(&url, len, NULL, &out, 0);
 }

+char *url_decode(const char *url)
+{
+       return url_decode_mem(url, strlen(url));
+}
+
 char *url_decode_parameter_name(const char **query)
 {
        struct strbuf out = STRBUF_INIT;
----

Here we can see that we're defining a function in a submodule and calling it in the main project. This is obviously a simplified example, but hopefully it gives you an idea of how this may be useful.

===== Useful Aliases

You may want to set up some aliases for some of these commands as they can be quite long and you can't set configuration options for most of them to make them defaults. We covered setting up Git aliases in <<_git_aliases>>, but here is an example of what you may want to set up if you plan on working with submodules in Git a lot.

[source,console]
----
$ git config alias.sdiff '!'"git diff && git submodule foreach 'git diff'"
$ git config alias.spush 'push --recurse-submodules=on-demand'
$ git config alias.supdate 'submodule update --remote --merge'
----

This way you can simply run `git supdate` when you want to update your submodules, or `git spush` to push with submodule dependency checking.

==== Issues with Submodules

Using submodules isn’t without hiccups, however.

For instance switching branches with submodules in them can also be tricky.
If you create a new branch, add a submodule there, and then switch back to a branch without that submodule, you still have the submodule directory as an untracked directory:

[source,console]
----
$ git checkout -b add-crypto
Switched to a new branch 'add-crypto'

$ git submodule add https://github.com/chaconinc/CryptoLibrary
Cloning into 'CryptoLibrary'...
...

$ git commit -am 'adding crypto library'
[add-crypto 4445836] adding crypto library
 2 files changed, 4 insertions(+)
 create mode 160000 CryptoLibrary

$ git checkout master
warning: unable to rmdir CryptoLibrary: Directory not empty
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	CryptoLibrary/

nothing added to commit but untracked files present (use "git add" to track)
----

Removing the directory isn't difficult, but it can be a bit confusing to have that in there. If you do remove it and then switch back to the branch that has that submodule, you will need to run `submodule update --init` to repopulate it.

[source,console]
----
$ git clean -fdx
Removing CryptoLibrary/

$ git checkout add-crypto
Switched to branch 'add-crypto'

$ ls CryptoLibrary/

$ git submodule update --init
Submodule path 'CryptoLibrary': checked out 'b8dda6aa182ea4464f3f3264b11e0268545172af'

$ ls CryptoLibrary/
Makefile	includes	scripts		src
----

Again, not really very difficult, but it can be a little confusing.

The other main caveat that many people run into involves switching from subdirectories to submodules.
If you’ve been tracking files in your project and you want to move them out into a submodule, you must be careful or Git will get angry at you.
Assume that you have files in a subdirectory of your project, and you want to switch it to a submodule.
If you delete the subdirectory and then run `submodule add`, Git yells at you:

[source,console]
----
$ rm -Rf CryptoLibrary/
$ git submodule add https://github.com/chaconinc/CryptoLibrary
'CryptoLibrary' already exists in the index
----

You have to unstage the `CryptoLibrary` directory first.
Then you can add the submodule:

[source,console]
----
$ git rm -r CryptoLibrary
$ git submodule add https://github.com/chaconinc/CryptoLibrary
Cloning into 'CryptoLibrary'...
remote: Counting objects: 11, done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 11 (delta 0), reused 11 (delta 0)
Unpacking objects: 100% (11/11), done.
Checking connectivity... done.
----

Now suppose you did that in a branch.
If you try to switch back to a branch where those files are still in the actual tree rather than a submodule – you get this error:

[source,console]
----
$ git checkout master
error: The following untracked working tree files would be overwritten by checkout:
  CryptoLibrary/Makefile
  CryptoLibrary/includes/crypto.h
  ...
Please move or remove them before you can switch branches.
Aborting
----

You can force it to switch with `checkout -f`, but be careful that you don't have unsaved changes in there as they could be overwritten with that command.

[source,console]
----
$ git checkout -f master
warning: unable to rmdir CryptoLibrary: Directory not empty
Switched to branch 'master'
----

Then, when you switch back, you get an empty `CryptoLibrary` directory for some reason and `git submodule update` may not fix it either. You may need to go into your submodule directory and run a `git checkout .` to get all your files back. You could run this in a `submodule foreach` script to run it for multiple submodules.

It's important to note that submodules these days keep all their Git data in the top project's `.git` directory, so unlike much older versions of Git, destroying a submodule directory won't lose any commits or branches that you had.

With these tools, submodules can be a fairly simple and effective method for developing on several related but still separate projects simultaneously.
