[[_searching]]
=== Búsqueda

Con casi cualquier código base de tamaño, a menudo necesitarás encontrar dónde se nombra o define una función, o encontrar el historial de un método. Git proporciona un par de herramientas útiles para la búsqueda a lo largo del código y de los cambios consignados permanentemente en su base de datos rápida y fácilmente. Veremos algunos de ellos.

[[_git_grep]]
==== Git Grep

Git hace ship con un comando llamado "grep" que te permine buscar fácilmente a lo largo de cualquier árbol consignado permanentemente o de el directorio de trabajo para una cadena o expresión regular. Para estos ejemplos, miraremos a través de el propio código fuente de Git.

Por defecto, mirará a través de los archivos en tu directorio de trabajo. Puedes poner "-n" para resaltar los números de línea donde Git ha encontrado coincidencias.

[source,console]
----
$ git grep -n gmtime_r
compat/gmtime.c:3:#undef gmtime_r
compat/gmtime.c:8:      return git_gmtime_r(timep, &result);
compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)
compat/gmtime.c:16:     ret = gmtime_r(timep, result);
compat/mingw.c:606:struct tm *gmtime_r(const time_t *timep, struct tm *result)
compat/mingw.h:162:struct tm *gmtime_r(const time_t *timep, struct tm *result);
date.c:429:             if (gmtime_r(&now, &now_tm))
date.c:492:             if (gmtime_r(&time, tm)) {
git-compat-util.h:721:struct tm *git_gmtime_r(const time_t *, struct tm *);
git-compat-util.h:723:#define gmtime_r git_gmtime_r
----

Hay una serie de opciones interesantes que puedes obtener del comando "grep".

Por ejemplo, en lugar de la llamada anterior, puedes tener que Git sintetiza la salida sólo con mostrate los archivos que coincideron y cuántas coincidencias hubo en cada archivo con la opción "--count":

[source,console]
----
$ git grep --count gmtime_r
compat/gmtime.c:4
compat/mingw.c:1
compat/mingw.h:1
date.c:2
git-compat-util.h:2
----

Si quieres ver qué método o función piensa que ha encontrado un emparejamiento, puedes poner "-p":

[source,console]
----
$ git grep -p gmtime_r *.c
date.c=static int match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm)
date.c:         if (gmtime_r(&now, &now_tm))
date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)
date.c:         if (gmtime_r(&time, tm)) {
----

Así que aquí podemos ver que "gmtime_r" es nombrado en las funciones "match_multi_number" y "match_digit" en el archivo date.c.

Puedes también ir tras combinaciones complejas de cadenas con la flag "--and", la que asegura que múltiples coincidencias están en la misma línea. Por ejemplo, busquemos líneas que definan una constante con cualquiera de las cadenas "LINK" o "BUF_MAX" en ellas en el código base de Git en una versión anterior a la 1.8.0.

Aquí también usamos las opciones "--break" y "--heading", las que ayudan a dividiar la salida en formatos más fáciles de leer.

[source,console]
----
$ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */
----

El comando "git grep" tiene unas pocas ventajas sobre comandos de búsqueda normales como "grep" y "ack". La primera es que es realmente rápido, la segunda es que puedes buscar a lo largo de cualquier árbol en Git, no sólo el directorio de trabajo. Como vimos en el ejemplo anterior, buscamos términos en una versión anterior del código fuente de Git, no la versión actual.

==== Búsqueda Git Log

Quizás no estás buscando **where** existe un término, sino **when** existió o fue introducido. El comando "git log" tiene una serie de heramientas poderosas para buscar commits específicos por el contenido de sus mensajes o incluso por el contenido del diff que ellos introducen.

Si queremos encontrar, por ejemplo, cuando la constante "ZLIB_BUF_MAX" fue introducida originalmente, podemos decirle a Git que sólo nos muestre los commits que agreagaron o eliminaros esa cadena con la opción "-S".

[source,console]
----
$ git log -SZLIB_BUF_MAX --oneline
e01503b zlib: allow feeding more than 4GB in one go
ef49a7a zlib: zlib can only process 4GB at a time
----

Si nos fijamos en los diff de esos commits, podemos ver que en la constante "ef49a7a" fue introducida y en "e01503b" fue modificada.

Si necesitas ser más específico, puedes proporcionar una expresicón regular para buscar con la opción "-G".

===== Búsqueda de Línea Log

Otro más o menos avanzado log de búsqueda que es increíblemente útil es la línea búsqueda en historial. Esta es una incorporación más o menos reciente y no muy conocida, pero puede ser realmente de ayuda. Es llamada con la opción "-L" a "git log" y te mostrará el historial de una función o línea de código en tu código base.

Por ejemplo, si queríamos ver cada cambio hecho para la función "git_deflate_bound" en el archivo "zlib.c", podíamos ejecutar "git log -L :git_deflate_bound:zlib.c". Esto intentará resolver lo que son las raíces de esa función y luego buscar entre el historial y mostrarnos cada cambio que fue hecho a la función, como una serie de parches de vuelta a cuando la función fue creada primero.

[source,console]
----
$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:52:15 2011 -0700

    zlib: zlib can only process 4GB at a time

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -85,5 +130,5 @@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }


commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:18:17 2011 -0700

    zlib: wrap deflateBound() too

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -81,0 +85,5 @@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+
----

Si Git no puede decifrar como emparejar una función o un método en tu lenguaje de programación, puedes proveerle tambien una expresión regular (regex). Por ejemplo, esto habría hecho lo mismo: "git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c". Podrías también darle un rango de líneas o un sólo número de línea y obtendrías el mismo tipo de salida.
