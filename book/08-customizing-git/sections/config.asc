[[_git_config]]
=== Git Configuration

(((git commands, config)))
Como se ha visto brevemente en <<_getting_started>>, podemos acceder a los
ajustes de configuración de Git a través del comando 'git config'. Una de las
primeras acciones que has realizado con Git ha sido el configurar tu nombre
y tu dirección de correo-e.

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Ahora vas a aprender un puñado de nuevas e interesantes opciones que puedes
utilizar para personalizar el uso de Git.

Primeramente, vamos a repasar brevemente los detalles de configuración de Git
que ya has visto. Para determinar su comportamiento no estandar, Git emplea
una serie de archivos de configuración. El primero de ellos es el archivo
`/etc/gitconfig`, que contiene valores para todos y cada uno de los usuarios en
el sistema y para todos sus repositorios. Con la opción `--system` del comando
`git config`, puedes leer y escribir de/a este archivo.

El segundo es el archivo `~/.gitconfig` (o `~/.config/git/config`), específico
para cada usuario. Con la opción `--global`, `git config` lee y escribe en
este archivo.

Y por último, Git también puede considerar valores de configuración presentes
en el archivo `.git/config` de cada repositorio que estés utilizando. Estos
valores se aplicarán únicamente a dicho repositorio.

Cada nivel sobreescribe los valores del nivel anterior; es decir lo configurado
en `.git/config` tiene preferencia con respecto a lo configurado en
`/etc/gitconfig`, por ejemplo.

[NOTE]
====
Los ficheros de configuración de Git son de texto plano, por lo que también
puedes ajustar manualmente los valores de configuración, editando directamente
los archivos correspondientes y escribiendo en ellos con la sintaxis
correspondiente; pero suele ser más sencillo hacerlo siempre a través del
comando `git config`.
====

==== Basic Client Configuration

Las opciones de configuración reconocidas por Git pueden distribuirse en dos
grandes categorias: las del lado cliente y las del lado servidor. La mayoria
de las opciones están en el lado cliente, – configurando tus preferencias
personales de trabajo –. Aunque hay multitud de ellas, aquí vamos a ver
solamente unas pocas, las más comunmente utilizadas o las que afectan
significativamente a tu forma de trabajar. No vamos a revisar aquellas opciones
utilizadas solo en casos muy especiales. Si quieres consultar una lista
completa, con todas las opciones contempladas en tu versión de Git, puedes
lanzar el comando:

[source,console]
----
$ man git-config
----

Este comando muestra todas las opciones con cierto nivel de detalle. También
puedes encontrar esta información de referencia en
http://git-scm.com/docs/git-config.html[].

===== `core.editor`

((($EDITOR)))((($VISUAL, see $EDITOR)))
Por defecto, Git utiliza cualquier editor que hayas configurado como editor de
texto por defecto de tu sistema (`$VISUAL` o `$EDITOR`). O, si no lo has
configurado, utilizará `vi` como editor para crear y editar las etiquetas y
mensajes de tus confirmaciones de cambio (commit). Para cambiar ese
comportamiento, puedes utilizar el ajuste `core.editor`:

[source,console]
----
$ git config --global core.editor emacs
----

A partir de ese comando, por ejemplo, git lanzará Emacs cada vez que vaya a
editar mensajes; indistintamente del editor configurado en la línea de
comandos (shell) del sistema.

===== `commit.template`

(((commit templates)))
Si preparas este ajuste para apuntar a un archivo concreto de tu sistema, Git
lo utilizará como mensaje por defecto cuando hagas confirmaciones de cambio.
Por ejemplo, imagina que creas una plantilla en `~/.gitmessage.txt` con un
contenido tal como:

[source]
----
subject line

what happened

[ticket: X]
----

Para indicar a Git que lo utilice como mensaje por defecto y que aparezca en tu
editor cuando lances el comando `git commit`, tan solo has de ajustar
`commit.template`:


[source,console]
----
$ git config --global commit.template ~/.gitmessage.txt
$ git commit
----

A partir de entonces, cada vez que confirmes cambios (commit), tu editor se
abrirá con algo como esto:

[source]
----
subject line

what happened

[ticket: X]
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
# modified:   lib/test.rb
#
~
~
".git/COMMIT_EDITMSG" 14L, 297C
----

Si tienes una política concreta con respecto a los mensajes de confirmación
de cambios, puedes aumentar las posibilidades de que sea respetada si creas
una plantilla acorde a dicha política y la pones como plantilla por defecto
de Git.

===== `core.pager`

(((pager)))
El parámetro core.pager selecciona el paginador utilizado por Git cuando
muestra resultados de comandos tales como `log` o `diff`.. Puedes ajustarlo
para que utilice `more` o tu paginador favorito, (por defecto, se utiliza
`less`); o puedes anular la paginación si le asignas una cadena vacía.

[source,console]
----
$ git config --global core.pager ''
----

Si lanzas esto, Git mostrará siempre el resultado completo de todos los
comandos, independientemente de lo largo que sea éste.

===== `user.signingkey`

(((GPG)))
Si tienes costumbre de firmar tus etiquetas (tal y como se ha visto en
<<_signing>>), configurar tu clave de firma GPG puede facilitarte la labor.
Puedes configurar tu clave ID de esta forma:

[source,console]
----
$ git config --global user.signingkey <gpg-key-id>
----

Ahora podrás firmar etiquetas sin necesidad de indicar tu clave cada vez en el
comando `git tag`.

[source,console]
----
$ git tag -s <tag-name>
----

===== `core.excludesfile`

(((excludes)))(((.gitignore)))
Se pueden indicar expresiones en el archivo '.gitignore' de tu proyecto para
indicar a Git lo que debe considerar o no como archivos sin seguimiento, o lo
que interará o no seleccionar cuando lances el comando 'git add', tal y como
se indicó en <<_ignoring>>.

Pero a veces, necesitas ignorar ciertos ficheros en todos los repositorios
con los que trabajas. Por ejemplo, si trabajas en una computadora con Mac OS
X, estarás al tanto de la existencia de los fichero `.DS_Store`. O si usas
Emacs o Vim, también conocerás los ficheros terminados en `~`.

Este ajuste puedes grabarlo en un fichero global, llamado
`~/.gitignore_global`, con estos contenidos:

[source]
----
*~
.DS_Store
----

…y si ahora lanzas `git config --global core.excludesfile ~/.gitignore_global`,
Git ya nunca más tendrá en cuenta esos ficheros en tus repositorios.

===== `help.autocorrect`

(((autocorrect)))
Si te equivocas al teclear un comando de Git, te mostrará algo como:

[source,console]
----
$ git chekcout master
git: 'chekcout' is not a git command. See 'git --help'.

Did you mean this?
    checkout
----

Git intenta imaginar qué es lo que querías escribir, pero aun así no
lo intenta ejecutar. Si pones la opción `help.autocorrect` a 1, Git
sí lanzará el comando corrigiendo tu error:

[source,console]
----
$ git chekcout master
WARNING: You called a Git command named 'chekcout', which does not exist.
Continuing under the assumption that you meant 'checkout'
in 0.1 seconds automatically...
----

Observa lo de ``0.1 seconds''. Es un entero que representa décimas de segundo.
Si le das un valor 50, Git retrasará la ejecución final del comando 5 segundos
con el fin de que puedas abortar la operación auto-corregida con la opción
`help.autocorrect`.

==== Colors in Git

(((color)))
Git fully supports colored terminal output, which greatly aids in visually parsing command output quickly and easily.
A number of options can help you set the coloring to your preference.

===== `color.ui`

Git puede marcar con colores los resultados que muestra en tu terminal,
ayudandote así a leerlos más facilmente. Hay unos cuantos parámetros que te
pueden ayudar a configurar tus colores favoritos.

Para desactivar totalmente los colores, puedes hacer esto:

[source,console]
----
$ git config --global color.ui false
----

El valor predeterminado es `auto`, que colorea la salida cuando va a un
terminal, pero no lo hace cuando se envía la salida a un fichero o a una
tubería.

También puedes ponerlo a `always` para hacer que se coloree siempre. Es muy
raro que quieras hacer esto, ya que cuando se quiere puntualmente colorear
la salida redirigida  se puede pasar un flag `--color` al comando Git.

===== `color.*`

Cuando quieras ajustar específicamente, comando a comando, donde colorear y
cómo colorear, puedes emplear los ajustes particulares de color. Cada uno de
ellos puede fijarse a `true` (verdadero), `false` (falso) o `always` (siempre):

  color.branch
  color.diff
  color.interactive
  color.status

Además, cada uno de ellos tiene parámetros adicionales para asignar colores a
partes específicas, por si quieres precisar aún más. Por ejemplo, para mostrar
la meta-información del comando `diff` con letra azul sobre fondo negro y con
caracteres en negrita, puedes indicar:

  $ git config --global color.diff.meta "blue black bold"

Puedes ajustar un color a cualquiera de los siguientes valores: `normal`,
`black` (negro), `red` (rojo), `green` (verde), `yellow` (amarillo), `blue`
(azul), `magenta`, `cyan` (cian), o `white` (blanco).

También puedes aplicar atributos tales como `bold` (negrita), `dim` (tenue),
`ul` (subrayado), `blink` (parpadeante) y `reverse`(video inverso).

[[_external_merge_tools]]
==== External Merge and Diff Tools

(((mergetool)))(((difftool)))
Although Git has an internal implementation of diff, which is what we've been showing in this book, you can set up an external tool instead.
You can also set up a graphical merge-conflict-resolution tool instead of having to resolve conflicts manually.
We'll demonstrate setting up the Perforce Visual Merge Tool (P4Merge) to do your diffs and merge resolutions, because it's a nice graphical tool and it's free.

If you want to try this out, P4Merge works on all major platforms, so you should be able to do so.
We'll use path names in the examples that work on Mac and Linux systems; for Windows, you'll have to change `/usr/local/bin` to an executable path in your environment.

To begin, download P4Merge from http://www.perforce.com/downloads/Perforce/[].
Next, you'll set up external wrapper scripts to run your commands.
We'll use the Mac path for the executable; in other systems, it will be where your `p4merge` binary is installed.
Set up a merge wrapper script named `extMerge` that calls your binary with all the arguments provided:

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $*
----

The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.
By default, Git passes the following arguments to the diff program:

[source]
----
path old-file old-hex old-mode new-file new-hex new-mode
----

Because you only want the `old-file` and `new-file` arguments, you use the wrapper script to pass the ones you need.

[source,console]
----
$ cat /usr/local/bin/extDiff
#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/extMerge "$2" "$5"
----

You also need to make sure these tools are executable:

[source,console]
----
$ sudo chmod +x /usr/local/bin/extMerge
$ sudo chmod +x /usr/local/bin/extDiff
----

Now you can set up your config file to use your custom merge resolution and diff tools.
This takes a number of custom settings: `merge.tool` to tell Git what strategy to use, `mergetool.<tool>.cmd` to specify how to run the command, `mergetool.<tool>.trustExitCode` to tell Git if the exit code of that program indicates a successful merge resolution or not, and `diff.external` to tell Git what command to run for diffs.
So, you can either run four config commands

[source,console]
----
$ git config --global merge.tool extMerge
$ git config --global mergetool.extMerge.cmd \
  'extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"'
$ git config --global mergetool.extMerge.trustExitCode false
$ git config --global diff.external extDiff
----
or you can edit your `~/.gitconfig` file to add these lines:

[source,ini]
----
[merge]
  tool = extMerge
[mergetool "extMerge"]
  cmd = extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  trustExitCode = false
[diff]
  external = extDiff
----

After all this is set, if you run diff commands such as this:

[source,console]
----
$ git diff 32d1776b1^ 32d1776b1
----

Instead of getting the diff output on the command line, Git fires up P4Merge, which looks something like this:

.P4Merge.
image::images/p4merge.png[P4Merge.]

If you try to merge two branches and subsequently have merge conflicts, you can run the command `git mergetool`; it starts P4Merge to let you resolve the conflicts through that GUI tool.

The nice thing about this wrapper setup is that you can change your diff and merge tools easily.
For example, to change your `extDiff` and `extMerge` tools to run the KDiff3 tool instead, all you have to do is edit your `extMerge` file:

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*
----

Now, Git will use the KDiff3 tool for diff viewing and merge conflict resolution.

Git comes preset to use a number of other merge-resolution tools without your having to set up the cmd configuration.
To see a list of the tools it supports, try this:

[source,console]
----
$ git mergetool --tool-help
'git mergetool --tool=<tool>' may be set to one of the following:
        emerge
        gvimdiff
        gvimdiff2
        opendiff
        p4merge
        vimdiff
        vimdiff2

The following tools are valid, but not currently available:
        araxis
        bc3
        codecompare
        deltawalker
        diffmerge
        diffuse
        ecmerge
        kdiff3
        meld
        tkdiff
        tortoisemerge
        xxdiff

Some of the tools listed above only work in a windowed
environment. If run in a terminal-only session, they will fail.
----

If you're not interested in using KDiff3 for diff but rather want to use it just for merge resolution, and the kdiff3 command is in your path, then you can run

[source,console]
----
$ git config --global merge.tool kdiff3
----

If you run this instead of setting up the `extMerge` and `extDiff` files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs.

==== Formatting and Whitespace

(((whitespace)))
Formatting and whitespace issues are some of the more frustrating and subtle problems that many developers encounter when collaborating, especially cross-platform.
It's very easy for patches or other collaborated work to introduce subtle whitespace changes because editors silently introduce them, and if your files ever touch a Windows system, their line endings might be replaced.
Git has a few configuration options to help with these issues.

===== `core.autocrlf`

(((crlf)))(((line endings)))
If you're programming on Windows and working with people who are not (or vice-versa), you'll probably run into line-ending issues at some point.
This is because Windows uses both a carriage-return character and a linefeed character for newlines in its files, whereas Mac and Linux systems use only the linefeed character.
This is a subtle but incredibly annoying fact of cross-platform work; many editors on Windows silently replace existing LF-style line endings with CRLF, or insert both line-ending characters when the user hits the enter key.

Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, and vice versa when it checks out code onto your filesystem.
You can turn on this functionality with the `core.autocrlf` setting.
If you're on a Windows machine, set it to `true` – this converts LF endings into CRLF when you check out code:

[source,console]
----
$ git config --global core.autocrlf true
----

If you're on a Linux or Mac system that uses LF line endings, then you don't want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it.
You can tell Git to convert CRLF to LF on commit but not the other way around by setting `core.autocrlf` to input:

[source,console]
----
$ git config --global core.autocrlf input
----

This setup should leave you with CRLF endings in Windows checkouts, but LF endings on Mac and Linux systems and in the repository.

If you're a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to `false`:

[source,console]
----
$ git config --global core.autocrlf false
----

===== `core.whitespace`

Git comes preset to detect and fix some whitespace issues.
It can look for six primary whitespace issues – three are enabled by default and can be turned off, and three are disabled by default but can be activated.

The ones that are turned on by default are `blank-at-eol`, which looks for spaces at the end of a line; `blank-at-eof`, which notices blank lines at the end of a file; and `space-before-tab`, which looks for spaces before tabs at the beginning of a line.

The three that are disabled by default but can be turned on are `indent-with-non-tab`, which looks for lines that begin with spaces instead of tabs (and is controlled by the `tabwidth` option); `tab-in-indent`, which watches for tabs in the indentation portion of a line; and `cr-at-eol`, which tells Git that carriage returns at the end of lines are OK.

You can tell Git which of these you want enabled by setting `core.whitespace` to the values you want on or off, separated by commas.
You can disable settings by either leaving them out of the setting string or prepending a `-` in front of the value.
For example, if you want all but `cr-at-eol` to be set, you can do this:

[source,console]
----
$ git config --global core.whitespace \
    trailing-space,space-before-tab,indent-with-non-tab
----

Git will detect these issues when you run a `git diff` command and try to color them so you can possibly fix them before you commit.
It will also use these values to help you when you apply patches with `git apply`.
When you're applying patches, you can ask Git to warn you if it's applying patches with the specified whitespace issues:

[source,console]
----
$ git apply --whitespace=warn <patch>
----

Or you can have Git try to automatically fix the issue before applying the patch:

[source,console]
----
$ git apply --whitespace=fix <patch>
----

These options apply to the `git rebase` command as well.
If you've committed whitespace issues but haven't yet pushed upstream, you can run `git rebase --whitespace=fix` to have Git automatically fix whitespace issues as it's rewriting the patches.

==== Server Configuration

Not nearly as many configuration options are available for the server side of Git, but there are a few interesting ones you may want to take note of.

===== `receive.fsckObjects`

Git is capable of making sure every object received during a push still matches its SHA-1 checksum and points to valid objects.
However, it doesn't do this by default; it's a fairly expensive operation, and might slow down the operation, especially on large repositories or pushes.
If you want Git to check object consistency on every push, you can force it to do so by setting `receive.fsckObjects` to true:

[source,console]
----
$ git config --system receive.fsckObjects true
----

Now, Git will check the integrity of your repository before each push is accepted to make sure faulty (or malicious) clients aren't introducing corrupt data.

===== `receive.denyNonFastForwards`

If you rebase commits that you've already pushed and then try to push again, or otherwise try to push a commit to a remote branch that doesn't contain the commit that the remote branch currently points to, you'll be denied.
This is generally good policy; but in the case of the rebase, you may determine that you know what you're doing and can force-update the remote branch with a `-f` flag to your push command.

To tell Git to refuse force-pushes, set `receive.denyNonFastForwards`:

[source,console]
----
$ git config --system receive.denyNonFastForwards true
----

The other way you can do this is via server-side receive hooks, which we'll cover in a bit.
That approach lets you do more complex things like deny non-fast-forwards to a certain subset of users.

===== `receive.denyDeletes`

One of the workarounds to the `denyNonFastForwards` policy is for the user to delete the branch and then push it back up with the new reference.
To avoid this, set `receive.denyDeletes` to true:

[source,console]
----
$ git config --system receive.denyDeletes true
----

This denies any deletion of branches or tags – no user can do it.
To remove remote branches, you must remove the ref files from the server manually.
There are also more interesting ways to do this on a per-user basis via ACLs, as you'll learn in <<_an_example_git_enforced_policy>>.
