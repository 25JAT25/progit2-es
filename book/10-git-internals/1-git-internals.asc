[[_git_internals]]
== Los entresijos internos de Git 

Puede que hayas llegado a este capítulo saltando desde alguno previo o puede que hayas llegado tras leer todo el resto del libro - en uno u otro caso, aquí es donde aprenderás acerca del funcionamiento interno y la implementación de Git.
Nos parece que esta información es realmente importante para entender cúan util y potente es Git, pero algunas personas opinan que puede ser confuso e innecesariamente complejo para novatos.
Por ello, lo hemos puesto en el capítulo final del libro; de tal forma que puedas leerlo antes o después, en cualquier momento, a lo largo de tu proceso de aprendizaje.
Lo dejamos en tus manos.

Y, ahora que estamos aquí, comencemos con el tema.
Ante todo, por si no estuviera suficientemente claro ya, Git es fundamentalmente un sistema de archivo (filesystem) con un interface de usuario (VCS) escrito sobre él.
En breve lo veremos con más detalle.

En los primeros tiempos de Git (principalmente antes de la versión 1.5), el interface de usuario era mucho más complejo, ya que se centraba en el sistema de archivos en lugar de en el VCS.
En los últimos años, el IU se ha refinado hasta llegar a ser tan limpio y sencillo de usar como el de cualquier otro sistema; pero frecuentemente, el estereotipo sigue mostrando a Git como complejo y dificil de aprender.

La capa del sistema de archivos que almacena el contenido es increiblemente interesante; por ello, es lo primero que vamos a desarrollar en este capítulo.
A continuación mostraremos los mecanismos de transporte y las tareas de mantenimiento del repositorio que posiblemente necesites usar alguna vez.


include::sections/plumbing-porcelain.asc[]

include::sections/objects.asc[]

include::sections/refs.asc[]

include::sections/packfiles.asc[]

include::sections/refspec.asc[]

include::sections/transfer-protocols.asc[]

include::sections/maintenance.asc[]

include::sections/environment.asc[]

=== Recapitulación

A estas alturas deberias tener una idea bastante clara de como trabaja Git entre bastidores y, hasta cierto punto, sobre cómo está implementado.
En este capítulo se han visto unos cuantos comandos "de fontanería" -comandos de menor nivel y más simples que los "de porcelana" que hemos estado viendo en el resto del libro.
Entendiendo cómo trabaja Git a bajo nivel, es más sencillo comprender por qué hace lo que hace, a la par que facilita la escritura de tus propias herramientas y scripts auxiliares para implementar flujos de trabajo tal y como necesites.

Git, en su calidad de sistema de archivos indexador-de-contenidos, es una herramienta muy poderosa  que puedes usar fácilmente para otras tareas además de la de gestión de versiones.
Esperamos que uses este nuevo conocimiento profundo de las entrañas de Git para implementar tus propias aplicaciones y para que te encuentres más confortable trabajando con Git de forma avanzada.
